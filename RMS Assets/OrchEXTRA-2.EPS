%!PS-Adobe-3.0 EPSF-3.0%%Creator: ImageMark Software Labs%%For: () ()%%Title: C:\Jobs\Art\Sent to Customers\OrchEXTRA.EPS%%CreationDate: () ()%%BoundingBox: 0 0 1296 192%%DocumentProcessColors: Black%%ColorUsage:Color%%DocumentFonts: Helvetica%%+Helvetica-Bold%%+Helvetica-Oblique%%+Helvetica-BoldOblique%%+Times-Roman%%+Times-Bold%%+Times-Italic%%+Times-BoldItalic%%+Courier%%+Courier-Bold%%+Courier-Oblique%%+Courier-BoldOblique%%+Symbol%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_screens_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 3.0%AI3_ColorUsage: Color%AI3_TemplateBox: 0 0 1296 192%AI3_TileBox: 0 0 1296 192%AI3_DocumentPreview: None%%Template:%%PageOrigin:0.0000 0.0000%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 25 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			0			6 packedarray		} bind def		/findrgbcustomcolor		{			1			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop 			0 eq			{				pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				pop				3				{					1 exch sub					3 index mul 					1 exch sub					3 1 roll				} repeat				4 -1 roll pop				setrgbcolor			} ifelse		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_screens_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)%%Version: 1.2 0%%CreationDate: (03/24/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackingsystemdict beginuserdict /Adobe_screens_AI5 15 dict dup beginput/initialize{	Adobe_screens_AI5 begin	/screenid		deviceDPI 600 gt composite? not or		{		-1		}		{			deviceDPI currentScreenFreq 			dup dup 60 ge exch 150 le and deviceDPI 300 le and		{			pop 60		} if		div 1.41421 div 0.5 add cvi		} ifelse	def		2 screenid eq	{		/customsize 16 def		/customdata /customdata2 def		setcustomscreen	} if		3 screenid eq	{		/customsize 24 def		/customdata /customdata3 def		setcustomscreen	} if		4 screenid eq	{		/customsize 16 def		/customdata /customdata4 def		setcustomscreen	} if		5 screenid eq	{		/customsize 20 def		/customdata /customdata5 def		setcustomscreen	} if		6 screenid eq	{		/customsize 24 def		/customdata /customdata6 def		setcustomscreen	} if		7 screenid eq	{		/customsize 28 def		/customdata /customdata7 def		setcustomscreen	} if		8 screenid eq	{		/customsize 16 def		/customdata /customdata8 def		setcustomscreen	} if} def/terminate{	currentdict Adobe_screens_AI5 eq	{	 end	} if} def/setcustomscreen{	deviceDPI customsize div 0	{		1 add 2 div customsize mul cvi exch		1 add 2 div customsize mul cvi exch		customsize mul add		customdata load exch get 256 div	} setscreen} def/customdata2 28 28 mul string defcurrentfile customdata2 readhexstring4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECDF3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD044483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CFF0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata3 28 28 mul string defcurrentfile customdata3 readhexstring011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F688AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A125998DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A479336B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A177306989C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A115897DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A336C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata4 28 28 mul string defcurrentfile customdata4 readhexstring1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A32C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4CC38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata5 28 28 mul string defcurrentfile customdata5 readhexstring010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B112654A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A9937047334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E092351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B07204EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C29E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9FDAF3E2BA681C07214FA0DBF5E1B8671A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata6 28 28 mul string defcurrentfile customdata6 readhexstring081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A8190ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BDE4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B04071943B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B4864798091AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BEE4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A03061842B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC452280100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata7 28 28 mul string defcurrentfile customdata7 readhexstring01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F05122953A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D73372318253A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CEECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D33161E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E4350657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C220D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F64798499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F360E04112952A5CFEDFAF0DBB25E350Epop pop/customdata8 28 28 mul string defcurrentfile customdata8 readhexstring050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F132939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634BB8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADAF0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFCFFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB96775131210B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}def AGM_Gradient_Sep_private begin/initializeSeps{	_noImage not _level2PS not and{		/_whiteBytes 1 makeByte8 pt		/knockOut{			8 setImageParms _whiteBytes /_image load 5 execImage		}def		/linealFill{			mySave			8 setImageParms			_color{				_nCustomColorSD begin					cyan magenta yellow black					_spotColor{						spot1 begin							/tintImage tintValue 1 exch sub makeByte8 def					 end						spot2 begin							/tintImage tintValue 1 exch sub makeByte8 def					 end					}if			 end				4{					makeByte8 4 1 roll				}repeat				true 4 _nCustomColorSD ncolorimage			}{				_nCustomColorSD/black get 1 exch sub makeByte8 				_nCustomColorSD bwImage			}ifelse			myRestore		}def	}{		 /knockOut{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}def	}ifelse	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk false def			/magentaInk false def			/yellowInk false def			/blackInk false def			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{							_fillSD begin				exch				dup spot1/name get eq{					spot1 spot2				}{					spot2 spot1				}ifelse			 begin				 begin						/name xd						1 exch sub /tintValue xd						4{							tintValue mul 4 1 roll						}repeat						_spotColor not{							/tintValue null def						}if				 end					/tintValue 0 def			 end		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			renderCMYK			{				fillOvp			}{				spot1 begin					gsave					name null ne{						spot_C spot_M spot_Y spot_K name tintValue setCustomColor					}{						1 setgray					}ifelse					fillOvp 					grestore			 end				spot2 begin					name null ne{						gsave						true setoverprint						spot_C spot_M spot_Y spot_K name tintValue setCustomColor						fillOvp						grestore					}if			 end				newpath			}ifelse	 end	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		_rampSD begin			_color{				/cyanInk _cyanData 0 ne def				/magentaInk _magentaData 0 ne def				/yellowInk _yellowData 0 ne def				/blackInk _blackData 0 ne def				_nSamples setImageParms				_nSamples expandSpot				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				true 4 _rampSD ncolorimage			}{				/cyanInk false def				/magentaInk false def				/yellowInk false def				/blackInk true def				_nSamples setImageParms 				_blackData _rampSD bwImage			}ifelse	 end	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					false					currentpagedevice/SeparationOrder get{name eq or}forall					not				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK				{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and					{						pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse}def/initializeMultiPassSeps{	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	pt	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{		 begin				name null eq{					false				}{					spot_C spot_M spot_Y spot_K name ccThrough 				}ifelse		 end		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 200 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if	/linealImage _noImage{		/rectImage load	}{		_producingSeps{			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			/rampImage load		 end		}{			/rampImage load		}ifelse	}ifelse	def	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient begin			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator		 end		 end					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		pop	}{		/_useShells true def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 		_producingSeps not and	def}def/initializeLev1{	/makeByte8{		/_tmp 0 pt		255 mul cvi		8 string 8{			dup _tmp 3 index put 			/_tmp _tmp 1 add pt		}repeat		exch pop	}def	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				_C0_Space _C1_Space eq{			/_rampColorSpace _C0_Space pt		}{			(colorspace conflict!) ==			showpage			stop		}ifelse				_spotColor{			nsetcustomcolorend		}if	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			/Function 				bd					/FunctionType 3					/Domain [0 1]					/Functions _rampFuncsArray					/Bounds _boundsArray					/Encode _encodeArray				ed			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			/Function 				bd					/FunctionType 3					/Domain [0 1]					/Functions _rampFuncsArray					/Bounds _boundsArray					/Encode _encodeArray				ed			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		/fillRamp{ 				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			_rampFuncsArray _index		bd			/FunctionType 2			/Domain [0 1]			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div			_gradType 0 eq{				_invert{/C1}{/C0}ifelse _C0				_invert{/C0}{/C1}ifelse _C1			}{				_invert{/C0}{/C1}ifelse _C1				_invert{/C1}{/C0}ifelse _C0			}ifelse		ed		put				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def		/radialRamp		/fillRamp load def		/rampImage		/fillRamp load def		AGM_Gradient begin	/Bc{		6 npop	}def	 end		}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	currentdict/rampImage known not{		/rampImage{			_color{				_nSamples setImageParms									_rgbRamp{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}def	}if	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			setrgbcolor 4 npop		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			3 -1 roll pop pop			1 exch sub /_tmp xp			3{				1 exch sub _tmp mul 1 exch sub 3 1 roll			}repeat			setrgbcolor 			4 npop		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData /_ndx cvx /get cvx		_d255 /exch cvx /get cvx				_usingSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_firstShell true pt	_usingSmoothShade not{		fill	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{			radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD begin							spot1 begin								/name 3 index def								/spot_K 4 index def								/spot_Y 5 index def								/spot_M 6 index def								/spot_C 7 index def						 end					 end					}if					7				}{					_producingSeps{						_rampSD begin							spot1 begin								/name 4 index def								/spot_K 8 index def								/spot_Y 9 index def								/spot_M 10 index def								/spot_C 11 index def						 end					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD begin				spot1 /name get ne{					spot2 begin						/name xd						/spot_K _tmp 2 add index def						/spot_Y _tmp 3 add index def						/spot_M _tmp 4 add index def						/spot_C _tmp 5 add index def				 end				}{					pop				}ifelse		 end		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD begin				spot1 /name get ne{					spot2 begin						/name xd						/spot_K _tmp 5 add index def						/spot_Y _tmp 6 add index def						/spot_M _tmp 7 add index def						/spot_C _tmp 8 add index def				 end				}{					pop				}ifelse		 end		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_rampSD begin			_ccProcess _ccRGB or{				_rampType 3 eq _rampType 6 eq or{					spot2 begin						/tintImage _gradType 0 eq{							_tint2Data						}{							_tint1Data						}ifelse						def						name null eq{							/name /Black def						}if				 end				}if				spot1 begin					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{						_tint1Data					}{						_tint2Data					}ifelse					def					_rampType 2 eq _rampType 5 eq or{						name null eq{							/name spot2 /name get def							spot2 /name null put						}if					}{						name null eq{							/name /Black def						}if					}ifelse			 end			}if	 end	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt	0	_nSamples	[	/dup cvx	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}defcurrentdict/radialRamp known not{	/radialRamp{			/_saveMatrix _saveMatrix currentmatrix def				radialInit			_rampPoint			_nSamples 1 sub			_nRadSamples 		[			/dup cvx				_optimize{				/round cvx /cvi cvx			}if				/_ndx /exch cvx /pt cvx						_useShells{				/_firstShell cvx{					/_firstShell false pt				}{					0 0 3 index 360 0 arcn fill				}/ifelse cvx			}if				blendColor				_useShells{				0 0 3 /index cvx 0 360 /arc cvx 			}{				0 0 3 /index cvx 0 360 /arc cvx /fill cvx			}ifelse				/exch cvx _bInc /add cvx /exch cvx				_sInc /add cvx				_radHilite{				_xBCInc _yBCInc /translate cvx			}if		] cvx bind		repeat			pop pop			_saveMatrix setmatrix			_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_useShells _rampIndex 1 eq and{			fill		}if		_spotColor{			nsetcustomcolorend		}if				}def}ifendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 24 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 15 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null def	/XIVersion 6 defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null defcurrentdict /_colorimage known not{	/colorimage where	{		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def/WalkRGBString{	0 3 index	dup length 1 sub 0 3 3 -1 roll	{		3 getinterval { } forall		5 index exec		3 index	} for		 5 { pop } repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll	{		4 getinterval { } forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/ColorImageCompositeEmulator{	pop true eq	{		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load		 end		} if		image	} ifelse} def/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			sourcearray plateindex get exec		}		{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub			{				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/FourEqual{	4 index ne	{		pop pop pop false	}	{		4 index ne		{			pop pop false		}		{			4 index ne			{				pop false			}			{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index dup 		8 eq exch 1 eq or not end		{		/_colorimage load null ne		{			_colorimage		}		{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				dup 1 eq				{					pop pop image				}				{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			dup 1 eq			{				pop pop				image			}			{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0					{									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/XG{	pop pop} def/XF{	13 {pop} repeat} def/Xh{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH{	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def		XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			XIVersion 6 le			{				currentfile 128 string readline pop pop			}			if		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				XIVersion 6 le		{			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIMask			{				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load			imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						XIChannelCount 1 eq			{				gsave				0 setgray				image				grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/@{} def/&{} def/dp{	dup null eq	{		pop		_dp 0 ne		{			0 1 _dp 1 sub _dl mod			{				_da exch get 3 get			} for			_dp 1 sub _dl mod 1 add packedarray			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll			definepattern pop		} if	}	{		_dp 0 ne _dp _dl mod 0 eq and		{			null dp		} if		7 packedarray _da exch _dp _dl mod exch put		_dp _dl mod _da 0 get 4 get 2 packedarray		/_dp _dp 1 add def	} ifelse} def/E{	_ed begin	dup 0 get type /arraytype ne	{		0		{			dup 1 add index type /arraytype eq			{				1 add			}			{				exit			} ifelse		} loop		array astore	} if	/_dd exch def	/_ury exch def	/_urx exch def	/_lly exch def	/_llx exch def	/_n exch def	/_y 0 def	/_dl 4 def	/_dp 0 def	/_da _dl array def	0 1 _dd length 1 sub	{		/_d exch _dd exch get def		0 2 _d length 2 sub		{			/_x exch def			/_c _d _x get _ ne def			/_r _d _x 1 add get cvlit def			_r _ ne			{				_urx _llx sub _ury _lly sub				[				1 0 0 1 0 0				]				[				/save cvx				_llx neg _lly neg /translate cvx				_c				{					nc /begin cvx				} if				_r dup type /stringtype eq				{					cvx				}				{					{						exec					} /forall cvx				} ifelse				_c				{					/end cvx				} if				/restore cvx				] cvx				/_fn 12 _n length add string def				_y _fn cvs pop				/_y _y 1 add def				_fn 12 _n putinterval				_fn _c false dp				_d exch _x 1 add exch put			} if		} for	} for	null dp	_n _dd /_pd end	xput} def/fc{	_fm dup concatmatrix pop} def/p{	/_fm exch ddef	9 -2 roll _pm translate fc	7 -2 roll _pm scale fc	5 -1 roll _pm rotate fc	4 -2 roll exch 0 ne	{		dup _pm rotate fc		1 -1 _pm scale fc		neg _pm rotate fc	}	{		pop	} ifelse	dup _pm rotate fc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore fc	neg _pm rotate fc	_pd exch get /_fdd exch ddef	/_pf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					patternfill				}				{					pop					fill				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_psf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					9 copy 6 npop patternashow				}				{					pop					6 copy 3 npop hvashow				} ifelse				grestore				pop			} for			pop		} for		restore		sw rmoveto	} ddef	/_pjsf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					12 copy 6 npop patternawidthshow				}				{					pop 9 copy 3 npop hvawidthshow				} ifelse				grestore				pop			} for			pop		} for		restore		swj rmoveto	} ddef	/_lp /none ddef} def/sc{	_sm dup concatmatrix pop} def/P{	/_sm exch ddef	9 -2 roll _pm translate sc	7 -2 roll _pm scale sc	5 -1 roll _pm rotate sc	4 -2 roll exch 0 ne	{		dup _pm rotate sc		1 -1 _pm scale sc		neg _pm rotate sc	}	{		pop	} ifelse	dup _pm rotate sc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore sc	neg _pm rotate sc	_pd exch get /_sdd exch ddef	/_ps	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					patternstroke				}				{					pop stroke				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_pss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					10 copy 6 npop patternashowstroke				}				{					pop 7 copy 3 npop ss				} ifelse				grestore				pop			} for			pop		} for		restore		pop sw rmoveto	} ddef	/_pjss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					13 copy 6 npop patternawidthshowstroke				}				{					pop 10 copy 3 npop jss				} ifelse				grestore				pop			} for			pop		} for		restore		pop swj rmoveto	} ddef	/_lp /none ddef} defenduserdict /Adobe_pattern_AI5 18 dict dup beginput/initialize{	/definepattern where	{		pop	}	{	 begin	 begin		Adobe_pattern_AI5 begin		Adobe_pattern_AI5		{			dup xcheck			{				bind			} if			pop pop		} forall		mark		cachestatus 7 1 roll pop pop pop pop exch pop exch		{			{				10000 add				dup 2 index gt				{					exit				} if				dup setcachelimit			} loop		} stopped		cleartomark	 end 				 end	 end				Adobe_pattern_AI5 begin	} ifelse} def/terminate{	currentdict Adobe_pattern_AI5 eq	{	 end	} if} deferrordict/nocurrentpoint{	pop	stop} puterrordict/invalidaccess{	pop	stop} put/patternencoding256 array def0 1 255{	patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{	17 dict begin	/uniform exch def	/cache exch def	/key exch def	/procarray exch def	/mtx exch matrix invertmatrix def	/height exch def	/width exch def	/ctm matrix currentmatrix def	/ptm matrix def	/str 32 string def	/slice 9 dict def	slice /s 1 put	slice /q 256 procarray length div sqrt floor cvi put	slice /b 0 put	/FontBBox	[	0 0 0 0	] def	/FontMatrix mtx matrix copy def	/Encoding patternencoding def	/FontType 3 def	/BuildChar	{		exch	 begin		/setstrokeadjust where {pop true setstrokeadjust} if		slice begin		dup q dup mul mod s idiv /i exch def		dup q dup mul mod s mod /j exch def		q dup mul idiv procarray exch get		/xl j width s div mul def		/xg j 1 add width s div mul def		/yl i height s div mul def		/yg i 1 add height s div mul def		uniform		{			1 1		}		{			width 0 dtransform			dup mul exch dup mul add sqrt dup 1 add exch div			0 height dtransform			dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse		width 0 cache		{			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul			setcachedevice		}		{			setcharwidth		} ifelse		gsave		scale		newpath		xl yl moveto		xg yl lineto		xg yg lineto		xl yg lineto		closepath		clip		newpath	 end	 end		exec		grestore	} def	key currentdict definefont end} def/patterncachesize{	gsave	newpath	0 0 moveto	width 0 lineto	width height lineto	0 height lineto	closepath	patternmatrix setmatrix	pathbbox	exch ceiling 4 -1 roll floor sub 3 1 roll	ceiling exch floor sub	mul 1 add	grestore} def/patterncachelimit{	cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{	exch dup begin	setfont	ctm setmatrix	concat	slice exch /b exch slice /q get dup mul mul put	FontMatrix concat	uniform	{		width 0 dtransform round width div exch round width div exch		0 height dtransform round height div exch height div exch		0 0 transform round exch round exch		ptm astore setmatrix	}	{		ptm currentmatrix pop	} ifelse	{		currentpoint	} stopped not	{		2 npop		pathbbox		true		4 index 3 index eq		4 index 3 index eq		and		{			pop false			{				{					2 npop				}				{					3 npop true				}				{					7 npop true				}				{					pop true				} pathforall			} stopped			{				5 npop true			} if		} if		{			height div ceiling height mul 4 1 roll			width div ceiling width mul 4 1 roll			height div floor height mul 4 1 roll			width div floor width mul 4 1 roll			2 index sub height div ceiling cvi exch			3 index sub width div ceiling cvi exch			4 2 roll moveto			FontMatrix mtx invertmatrix			dup dup 4 get exch 5 get rmoveto			ptm ptm concatmatrix pop			slice /s			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi			dup slice /q get gt			{				pop slice /q get			} if			put			0 1 slice /s get dup mul 1 sub			{				slice /b get add				gsave				0 1 str length 1 sub				{					str exch 2 index put				} for				pop				dup				{					gsave					ptm setmatrix					1 index str length idiv					{						str show					} repeat					1 index str length mod str exch 0 exch getinterval show					grestore					0 height rmoveto				} repeat				grestore			} for			2 npop		}		{			4 npop		} ifelse	} if end} def/patternclip{	_eo {eoclip} {clip} ifelse} def/patternstrokepath{	strokepath} def/patternmatrixmatrix def/patternfill{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternclip	Adobe_pattern_AI5 /patternpath get exec	grestore	newpath} def/patternstroke{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternstrokepath	true	{		{			{				newpath				moveto			}			{				lineto			}			{				curveto			}			{				closepath				3 copy				Adobe_pattern_AI5 /patternfill get exec			} pathforall			3 npop		} stopped		{			5 npop			patternclip			Adobe_pattern_AI5 /patternfill get exec		} if	}	{		patternclip		Adobe_pattern_AI5 /patternfill get exec	} ifelse	grestore	newpath} def/vpatternawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef		{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	3 npop} def/hpatternawidthshow{	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		9 index 9 index 9 index		Adobe_pattern_AI5 /patternfill get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	8 npop} def/patternashow{0 0 0 6 3 rollpatternawidthshow} def/patternawidthshow{	6 index type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get 7 1 roll	} if	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse} def/vpatternawidthshowstroke{	7 1 roll	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			3 index setmatrix			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			4 index setmatrix			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	4 npop} def/hpatternawidthshowstroke{	7 1 roll	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		7 index setmatrix		10 index 10 index 10 index		Adobe_pattern_AI5 /patternstroke get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	9 npop} def/patternashowstroke{	0 0 0 7 3 roll	patternawidthshowstroke} def/patternawidthshowstroke{	7 index type /dicttype eq	{		patternmatrix /patternmatrix get 8 1 roll	} if	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse} defendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_screens_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec11 Bn%AI5_BeginGradient: (Gradient0)(Gradient0) 0 2 Bd[<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><84838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69696867666564636261605F5E5D5C5C5B5A595857565554535251504F4E4E4D4C4B4A49484746454443424141403F3E3D3C3B3A39383736353434333231302F2E2D2C2B2A29282726262524232221201F1E1D1C1B1A19191817161514131211100F0E0D0C0C><5C5B5A5A59595858575756565555545453535252515150504F4F4E4D4D4C4C4B4B4A4A494948484747464645454444434342424140403F3F3E3E3D3D3C3C3B3B3A3A393938383737363635353434333232313130302F2F2E2E2D2D2C2C2B2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919>1 %_Br[0.0000 0.0549 0.0471 0.0980 1 50 100 %_Bs0.0000 0.5608 0.5176 0.3608 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient1)(Gradient1) 0 2 Bd[<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><84838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69696867666564636261605F5E5D5C5C5B5A595857565554535251504F4E4E4D4C4B4A49484746454443424141403F3E3D3C3B3A39383736353434333231302F2E2D2C2B2A29282726262524232221201F1E1D1C1B1A19191817161514131211100F0E0D0C0C><5C5B5A5A59595858575756565555545453535252515150504F4F4E4D4D4C4C4B4B4A4A494948484747464645454444434342424140403F3F3E3E3D3D3C3C3B3B3A3A393938383737363635353434333232313130302F2F2E2E2D2D2C2C2B2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919>1 %_Br[0.0000 0.0549 0.0471 0.0980 1 50 100 %_Bs0.0000 0.5608 0.5176 0.3608 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient2)(Gradient2) 0 2 Bd[<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><84838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69696867666564636261605F5E5D5C5C5B5A595857565554535251504F4E4E4D4C4B4A49484746454443424141403F3E3D3C3B3A39383736353434333231302F2E2D2C2B2A29282726262524232221201F1E1D1C1B1A19191817161514131211100F0E0D0C0C><5C5B5A5A59595858575756565555545453535252515150504F4F4E4D4D4C4C4B4B4A4A494948484747464645454444434342424140403F3F3E3E3D3D3C3C3B3B3A3A393938383737363635353434333232313130302F2F2E2E2D2D2C2C2B2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919>1 %_Br[0.0000 0.0549 0.0471 0.0980 1 50 100 %_Bs0.0000 0.5608 0.5176 0.3608 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient3)(Gradient3) 0 2 Bd[<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><84838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69696867666564636261605F5E5D5C5C5B5A595857565554535251504F4E4E4D4C4B4A49484746454443424141403F3E3D3C3B3A39383736353434333231302F2E2D2C2B2A29282726262524232221201F1E1D1C1B1A19191817161514131211100F0E0D0C0C><5C5B5A5A59595858575756565555545453535252515150504F4F4E4D4D4C4C4B4B4A4A494948484747464645454444434342424140403F3F3E3E3D3D3C3C3B3B3A3A393938383737363635353434333232313130302F2F2E2E2D2D2C2C2B2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919>1 %_Br[0.0000 0.0549 0.0471 0.0980 1 50 100 %_Bs0.0000 0.5608 0.5176 0.3608 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient4)(Gradient4) 0 2 Bd[<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><84838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69696867666564636261605F5E5D5C5C5B5A595857565554535251504F4E4E4D4C4B4A49484746454443424141403F3E3D3C3B3A39383736353434333231302F2E2D2C2B2A29282726262524232221201F1E1D1C1B1A19191817161514131211100F0E0D0C0C><5C5B5A5A59595858575756565555545453535252515150504F4F4E4D4D4C4C4B4B4A4A494948484747464645454444434342424140403F3F3E3E3D3D3C3C3B3B3A3A393938383737363635353434333232313130302F2F2E2E2D2D2C2C2B2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919>1 %_Br[0.0000 0.0549 0.0471 0.0980 1 50 100 %_Bs0.0000 0.5608 0.5176 0.3608 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient5)(Gradient5) 0 2 Bd[<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><84838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69696867666564636261605F5E5D5C5C5B5A595857565554535251504F4E4E4D4C4B4A49484746454443424141403F3E3D3C3B3A39383736353434333231302F2E2D2C2B2A29282726262524232221201F1E1D1C1B1A19191817161514131211100F0E0D0C0C><5C5B5A5A59595858575756565555545453535252515150504F4F4E4D4D4C4C4B4B4A4A494948484747464645454444434342424140403F3F3E3E3D3D3C3C3B3B3A3A393938383737363635353434333232313130302F2F2E2E2D2D2C2C2B2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919>1 %_Br[0.0000 0.0549 0.0471 0.0980 1 50 100 %_Bs0.0000 0.5608 0.5176 0.3608 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient6)(Gradient6) 0 2 Bd[<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><84838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69696867666564636261605F5E5D5C5C5B5A595857565554535251504F4E4E4D4C4B4A49484746454443424141403F3E3D3C3B3A39383736353434333231302F2E2D2C2B2A29282726262524232221201F1E1D1C1B1A19191817161514131211100F0E0D0C0C><5C5B5A5A59595858575756565555545453535252515150504F4F4E4D4D4C4C4B4B4A4A494948484747464645454444434342424140403F3F3E3E3D3D3C3C3B3B3A3A393938383737363635353434333232313130302F2F2E2E2D2D2C2C2B2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919>1 %_Br[0.0000 0.0549 0.0471 0.0980 1 50 100 %_Bs0.0000 0.5608 0.5176 0.3608 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient7)(Gradient7) 0 2 Bd[<12111111111111111111111111111110101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A09090909090909090909090909090908080808080808080808080808080707070707070707070707070707060606060606060606060606060605050505050505050505050505050404040404040404040404040404030303030303030303030303030302020202020202020202020202020101010101010101010101010101000000000000000000000000000000><1110101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909090909090909090909080808080808080808080808080808070707070707070707070707070707060606060606060606060606060606050505050505050505050505050505040404040404040404040404040404030303030303030303030303030303020202020202020202020202020202010101010101010101010101010101000000000000000000000000000000><100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909090909090909090909090808080808080808080808080808080807070707070707070707070707070706060606060606060606060606060606050505050505050505050505050505050404040404040404040404040404040403030303030303030303030303030303020202020202020202020202020202020101010101010101010101010101010100000000000000000000000000000000><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFE>1 %_Br[0.0000 0.0000 0.0000 0.9961 1 50 100 %_Bs0.0706 0.0667 0.0627 0.0000 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient8)(Gradient8) 0 2 Bd[<12111111111111111111111111111110101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A09090909090909090909090909090908080808080808080808080808080707070707070707070707070707060606060606060606060606060605050505050505050505050505050404040404040404040404040404030303030303030303030303030302020202020202020202020202020101010101010101010101010101000000000000000000000000000000><1110101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909090909090909090909080808080808080808080808080808070707070707070707070707070707060606060606060606060606060606050505050505050505050505050505040404040404040404040404040404030303030303030303030303030303020202020202020202020202020202010101010101010101010101010101000000000000000000000000000000><100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909090909090909090909090808080808080808080808080808080807070707070707070707070707070706060606060606060606060606060606050505050505050505050505050505050404040404040404040404040404040403030303030303030303030303030303020202020202020202020202020202020101010101010101010101010101010100000000000000000000000000000000><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFE>1 %_Br[0.0000 0.0000 0.0000 0.9961 1 50 100 %_Bs0.0706 0.0667 0.0627 0.0000 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient9)(Gradient9) 0 2 Bd[<12111111111111111111111111111110101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A09090909090909090909090909090908080808080808080808080808080707070707070707070707070707060606060606060606060606060605050505050505050505050505050404040404040404040404040404030303030303030303030303030302020202020202020202020202020101010101010101010101010101000000000000000000000000000000><1110101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909090909090909090909080808080808080808080808080808070707070707070707070707070707060606060606060606060606060606050505050505050505050505050505040404040404040404040404040404030303030303030303030303030303020202020202020202020202020202010101010101010101010101010101000000000000000000000000000000><100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909090909090909090909090808080808080808080808080808080807070707070707070707070707070706060606060606060606060606060606050505050505050505050505050505050404040404040404040404040404040403030303030303030303030303030303020202020202020202020202020202020101010101010101010101010101010100000000000000000000000000000000><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFE>1 %_Br[0.0000 0.0000 0.0000 0.9961 1 50 100 %_Bs0.0706 0.0667 0.0627 0.0000 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Gradient10)(Gradient10) 0 2 Bd[<12111111111111111111111111111110101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A09090909090909090909090909090908080808080808080808080808080707070707070707070707070707060606060606060606060606060605050505050505050505050505050404040404040404040404040404030303030303030303030303030302020202020202020202020202020101010101010101010101010101000000000000000000000000000000><1110101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909090909090909090909080808080808080808080808080808070707070707070707070707070707060606060606060606060606060606050505050505050505050505050505040404040404040404040404040404030303030303030303030303030303020202020202020202020202020202010101010101010101010101010101000000000000000000000000000000><100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909090909090909090909090808080808080808080808080808080807070707070707070707070707070706060606060606060606060606060606050505050505050505050505050505050404040404040404040404040404040403030303030303030303030303030303020202020202020202020202020202020101010101010101010101010101010100000000000000000000000000000000><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFE>1 %_Br[0.0000 0.0000 0.0000 0.9961 1 50 100 %_Bs0.0706 0.0667 0.0627 0.0000 1 50 0 %_BsBD%AI5_EndGradient%%EndSetup1 XRu  0.000 0.000 0.000 0.000 k  0.000 0.000 0.000 0.000 K0.0000 0.0000 m1295.9280 0.0000 L1295.9280 191.8800 L0.0000 191.8800 L0.0000 0.0000 LFU  0.004 0.000 0.016 0.349 k [] 0 d1.2500 w  0.004 0.000 0.016 0.349 K1 j*u  979.1280 69.0547 m  979.1280 62.6775 L  979.1280 0.0000 L  1035.9435 4.5092 L  1035.9435 59.6499 L  1058.0385 0.0644 L  1115.1761 4.1871 L  1172.5714 0.0644 L  1181.1388 29.5673 L  1222.8164 29.5673 L  1231.2550 0.0644 L  1295.9294 4.5736 L  1276.2823 62.6775 L  1276.3467 62.6775 L  1236.8593 179.9159 L  1167.6113 179.9159 L  1128.9613 62.6775 L  1128.9613 62.6775 L  1114.4675 18.8741 L  1095.7222 62.6775 L  1095.7867 62.6775 L  1088.7008 79.2326 L  1088.7008 79.2326 L  1104.6118 87.8000  1112.1485 103.1956  1112.1485 121.4255 C  1112.1485 152.3455  1092.6947 179.9159  1045.7349 179.9159 C  1045.7349 179.9159 L  979.1280 179.9159 L  979.1280 69.0547 L  979.1280 69.0547 Lnu  854.3484 4.5812 m  808.6769 94.7646 L  808.6125 94.8290 L  849.6460 179.6014 L  787.0973 184.1106 L  770.8643 140.8869 L  754.4380 184.0462 L  690.7943 179.6014 L  732.5364 95.5376 L  687.9600 4.5812 L  752.1835 0.0720 L  769.8336 48.4490 L  788.6433 0.1364 L  854.3484 4.5812 L  854.3484 4.5812 LnUu  877.8669 69.0547 m  877.8669 62.6775 L  877.8669 0.0000 L  937.9033 4.5092 L  937.9033 62.6775 L  937.9033 69.0547 L  937.9033 123.6157 L  969.5319 123.6157 L  969.5319 179.9159 L  853.2597 179.9159 L  840.3120 123.6157 L  877.8669 123.6157 L  877.8669 69.0547 L  877.8669 69.0547 LnUu  1039.1760 94.6080 m  1039.1760 98.3442 L  1039.1760 98.3442 L  1039.4981 99.1816  1039.7557 100.1478  1039.7557 101.3073 C  1039.7557 102.3380  1039.5625 103.2398  1039.2404 104.0128 C  1039.2404 104.0128 L  1042.2036 104.1417 L  1039.3048 111.0343 L  1039.3048 111.1631 L  1039.3048 111.6784 L  1039.3048 111.6784 L  1039.3048 111.9361  1039.3048 112.1293  1039.2404 112.2582 C  1039.2404 112.2582 L  1039.2404 112.5158 L  1039.2404 112.5158 L  1039.1760 112.7091  1039.1760 112.8379  1039.1760 112.9023 C  1039.1760 112.9023 L  1039.1760 121.9851 L  1039.3692 121.9851 L  1039.3692 121.9851 L  1045.6177 121.9851  1048.5808 119.1508  1049.8692 114.6416 C  1049.9336 114.3195  1049.9980 114.1263  1050.0624 113.9974 C  1050.0624 113.9974 L  1050.3845 111.8717 L  1050.3845 111.7428 L  1050.3845 111.7428 L  1050.3845 111.6140  1050.3201 111.2275  1050.3201 110.8410 C  1050.3201 110.3257  1050.3845 109.4883  1050.6422 108.6508 C  1050.6422 108.6508 L  1050.6422 108.3932 L  1050.6422 108.3932 L  1050.6422 107.2981  1050.5777 106.3318  1050.5133 105.3656 C  1049.7403 104.0773  1049.3538 102.5313  1049.3538 100.9208 C  1049.3538 100.9208 L  1049.3538 100.5343 L  1049.3538 100.5343 L  1048.8385 99.3104  1048.2587 98.3442  1047.5502 97.5712 C  1047.5502 97.5712 L  1044.2649 95.4454 L  1044.0072 95.3166 L  1044.0072 95.3166 L  1042.8477 94.8657  1041.3662 94.6080  1039.3692 94.6080 C  1039.3692 94.6080 L  1039.1760 94.6080 L  1039.1760 94.6080 LnUu  1204.2828 92.1972 m  1204.2184 92.0039  1204.2184 91.6818  1204.2184 91.3598 C  1204.2184 89.2984  1204.7982 87.5592  1205.7644 86.2064 C  1205.7644 86.2064 L  1206.9239 81.5040 L  1196.4240 81.5040 L  1201.5129 101.8597 L  1201.5129 101.8597 L  1201.7062 101.3443  1201.8994 100.9578  1202.0282 100.6358 C  1202.0282 100.5069  1202.0927 100.3781  1202.0927 100.3137 C  1202.4147 99.6051  1202.5436 99.2186  1202.6080 98.9609 C  1202.6080 98.9609 L  1202.3503 92.6481 L  1204.1540 92.6481 L  1204.2828 92.1972 L  1204.2828 92.1972 LnUu  276.3477 131.1524 m  273.2557 130.6371  270.2281 129.7353  267.3294 128.5758 C  267.3294 128.5758 L  267.3294 140.4284 L  238.5995 135.3395 L  238.5995 118.5268 L  221.0138 118.3335 L  221.0138 118.3335 L  209.8053 156.9191  174.2472 184.2318  132.6340 184.2318 C  90.8920 184.2318  55.4628 157.0480  44.2543 118.5268 C  43.2236 118.5912  42.1930 118.6556  41.1623 118.7200 C  41.2267 119.3642  41.2911 119.6218  41.4200 119.7507 C  41.4200 119.7507 L  42.0641 120.6525 L  41.9997 121.7476 L  41.9997 122.2629 L  41.9997 122.2629 L  41.7420 127.7384  41.6776 136.7567  33.5611 140.6861 C  32.5304 141.2014  31.4998 141.3947  30.5335 141.3947 C  28.2145 141.3947  26.1532 140.2996  24.8004 139.1401 C  21.0643 135.9193  20.4201 131.8610  20.4201 128.3181 C  20.4201 126.9654  20.4845 125.6126  20.6134 124.3887 C  20.6778 123.1648  20.7422 122.0053  20.7422 120.9102 C  20.7422 119.9439  20.6778 119.1065  20.5489 118.3335 C  20.2268 118.2691  19.9692 118.2691  19.6471 118.2691 C  18.4232 118.2691  17.1348 118.4623  15.5888 118.6556 C  14.1073 118.8488  12.4324 119.0421  10.7576 119.0421 C  7.6656 119.0421  4.1871 118.2691  1.4816 114.9838 C  1.4816 114.9838 L  0.7086 114.1464 L  0.7086 112.9869 L  0.0000 74.9166 L  3.6073 69.9566 L  17.5858 70.2142 L  17.5858 70.2142 L  19.3250 68.4750  21.3864 67.3799  22.9324 66.4781 C  24.4139 65.6406  25.6379 64.9321  26.5397 64.1591 C  25.9599 63.9014  25.1869 63.5793  24.6716 63.0640 C  24.6716 63.0640 L  24.1563 62.6775 L  23.8986 62.0977 L  23.8986 62.0977 L  22.7391 59.9075  22.2238 57.5241  22.2238 55.0119 C  22.2238 54.4321  22.2238 53.7880  22.2882 53.1438 C  22.5459 50.5027  24.3495 46.8954  28.6010 46.8954 C  28.6010 46.8954 L  29.5673 46.8954 L  30.3403 47.4107 L  30.3403 47.4107 L  36.2666 51.2113  36.9108 58.4260  37.4261 62.8707 C  37.4905 63.5149  37.5549 64.0946  37.6194 64.6744 C  37.6194 64.6744 L  42.0641 69.6989 L  42.0641 69.6989 L  42.5150 69.6345  42.9015 69.6345  43.3525 69.5701 C  53.4659 29.4384  89.7325 0.5798  132.6340 0.5798 C  153.3118 0.5798  172.4436 7.2791  187.8392 18.7453 C  191.8974 18.6808  196.0201 18.6808  200.1427 18.6808 C  213.0261 18.6808  225.8450 18.9385  238.5995 19.5827 C  238.5995 19.5827 L  238.5995 0.0000 L  268.7466 5.0889 L  268.7466 21.7084 L  268.7466 21.7084 L  288.5869 23.5121  308.0408 26.3464  327.0437 30.3403 C  339.4117 12.2392  360.0250 0.5798  381.7335 0.5798 C  401.1873 0.5798  417.9357 9.4693  430.8834 23.2544 C  430.8834 23.2544 L  433.0092 25.5090 L  430.8834 27.6992 L  415.6811 43.0948 L  413.4265 45.3494 L  411.1075 43.1592 L  411.1075 43.1592 L  402.6045 34.9783  394.5524 29.3096  382.5065 29.3096 C  373.5526 29.3096  364.9207 33.4323  358.1570 39.9384 C  358.9944 41.0335  359.2520 42.4506  359.2520 43.4169 C  359.2520 43.7390  359.2520 44.1255  359.1232 44.5120 C  358.9944 45.3494  358.0925 47.7328  355.3226 47.7328 C  355.0650 47.7328  354.8073 47.7328  354.5496 47.6684 C  353.7766 47.4751  352.9392 47.3463  352.1662 47.1530 C  349.9760 50.4383  348.1724 54.1100  346.9485 57.9106 C  346.9485 57.9106 L  346.7552 58.4260 L  346.7552 58.4260 L  345.7245 61.9045  345.0804 65.3186  344.9515 68.9259 C  344.9515 68.9259 L  346.1110 68.2173 L  347.4638 68.6038 L  347.4638 68.6038 L  350.3625 69.3124  353.4545 69.5701  356.8042 69.5701 C  359.4453 69.5701  362.0220 69.4412  364.7919 69.3124 C  366.7244 69.1836  368.6569 69.0547  370.6538 68.9903 C  370.6538 61.9689  370.5250 55.1407  369.6876 48.6346 C  369.6876 48.6346 L  369.5587 47.2175 L  370.5250 46.1224 L  371.6201 44.8985 L  372.2642 44.1899 L  373.1661 43.9322 L  373.1661 43.9322 L  373.5526 43.8034  374.0679 43.7390  374.5188 43.7390 C  376.9666 43.7390  378.2550 45.4138  378.8347 46.5089 C  379.3501 47.5395  379.6077 48.6990  379.7366 49.2144 C  379.7366 49.2144 L  379.8010 49.3432 L  379.8654 49.7297 L  379.8654 50.0518 L  379.8654 50.0518 L  379.9298 51.7266  379.9942 53.5303  380.0586 55.3984 C  380.1875 57.9750  380.3807 60.7450  380.3807 63.4505 C  380.3807 65.1253  380.3163 66.8646  380.1231 68.6038 C  380.3163 68.6038  380.5096 68.6038  380.7672 68.5394 C  380.7672 68.5394 L  381.9911 68.5394 L  381.9911 68.5394 L  383.0218 68.5394  384.5034 68.6038  385.9850 69.5056 C  385.9850 69.5056 L  444.2177 69.1191 L  444.2177 0.0000 L  474.3647 5.0889 L  474.3647 68.9259 L  483.7051 68.8615 L  515.0117 68.8615 L  515.0117 68.8615 L  513.5945 68.0241  512.4994 66.6069  512.4994 64.2235 C  512.4994 63.6437  512.5638 62.9996  512.6927 62.4198 C  512.6927 62.4198 L  512.8215 61.9045 L  513.0792 61.4536 L  513.0792 61.4536 L  515.2693 57.7818  519.1988 57.7818  521.1957 57.7818 C  521.1957 57.7818 L  521.3245 57.7818 L  521.3245 57.7818 L  520.4871 52.8861  520.2938 47.7972  520.2938 42.7727 C  520.2938 39.9384  520.3583 37.0396  520.4227 34.2697 C  520.4871 31.4998  520.5515 28.7943  520.5515 26.1532 C  520.5515 26.1532 L  520.5515 23.5121 L  523.1282 22.9968 L  524.0944 22.8035 L  525.3183 22.5459 L  526.3490 23.1900 L  526.3490 23.1900 L  529.3122 24.9293  530.6005 28.0857  530.6005 31.1133 C  530.6005 31.1133 L  530.6005 31.7574 L  530.6005 32.0795 L  530.4717 32.4660 L  530.4717 32.4660 L  529.9564 34.3341  529.7631 36.3310  529.7631 38.5856 C  529.7631 41.0335  529.9564 43.6101  530.2784 46.2512 C  530.3429 47.4107  530.4717 48.5058  530.6005 49.6653 C  530.6005 49.6653 L  530.7938 49.7297 L  530.7938 0.0000 L  560.9408 5.0889 L  560.9408 68.8615 L  567.3825 68.8615 L  567.3825 68.8615 L  567.5757 68.7971  567.8334 68.6038  568.4131 68.2173 C  568.8641 67.9596  570.5389 66.6713  572.4070 66.6713 C  574.0818 66.6713  575.2413 67.5087  575.9499 68.5394 C  575.9499 68.5394 L  580.5879 68.5394 L  580.5879 65.1253 L  580.5879 4.3159 L  683.7191 4.3159 L  696.1515 57.6530 L  640.5599 57.6530 L  640.5599 65.1253 L  640.5599 68.4750 L  673.7989 69.2480 L  673.7989 117.9470 L  640.5599 117.9470 L  640.5599 128.2537 L  692.4153 128.2537 L  680.2406 179.9803 L  580.5879 179.9803 L  580.5879 117.6893 L  580.3946 117.6893 L  580.3946 117.3028 L  580.3946 117.3028 L  573.2444 117.3673  566.0297 117.4961  558.8150 117.6893 C  557.5911 117.6893  556.3672 117.7538  555.1433 117.7538 C  549.2170 127.8672  539.2968 134.1800  527.8950 137.3364 C  521.7754 139.0757  515.2693 139.8487  508.6988 139.8487 C  500.1958 139.8487  491.4352 138.0450  484.0916 134.5665 C  480.9996 135.9193  477.7144 136.6923  474.3647 136.8855 C  474.3647 136.8855 L  474.3647 186.0999 L  444.2177 181.0110 L  444.2177 139.9131 L  444.2177 139.9131 L  443.5735 141.2659  442.4784 142.4898  440.8680 143.4560 C  440.8680 143.4560 L  438.4202 144.9376 L  436.6165 142.6830 L  436.6165 142.6830 L  435.4570 141.1370  434.0399 139.0113  434.0399 136.2414 C  434.0399 135.2751  434.1687 134.3733  434.4908 133.4714 C  434.5552 133.0205  434.6196 132.5696  434.6196 132.1187 C  434.6196 131.0880  434.4908 130.0574  434.2975 128.7690 C  434.1043 127.6095  433.9110 126.2568  433.9110 124.8396 C  433.9110 124.5175  433.9754 124.1954  433.9754 123.8734 C  432.5583 123.2292  431.2055 122.5206  429.9172 121.6832 C  416.3897 133.4070  399.7702 139.9131  381.7335 139.9131 C  361.6999 139.9131  344.7583 131.5389  332.9700 118.3335 C  332.9700 118.3335 L  312.7432 118.3335 L  312.7432 118.3335 L  312.7432 118.7844  312.8076 119.1709  312.8076 119.6218 C  312.9364 121.2967  313.0653 123.0359  313.1297 124.7752 C  313.1297 124.7752 L  319.6358 140.3640 L  303.0807 140.3640 L  303.0807 140.3640 L  292.1298 140.3640  283.3047 136.8855  276.3477 131.1524 C  276.3477 131.1524 LnUu  151.7639 152.2975 m  162.6503 148.4325  172.1840 141.4111  179.4631 132.5216 C  179.4631 132.5216 L  166.5153 132.5216 L  84.3840 131.0400 L  84.3840 131.0400 L  85.0926 132.0062  85.8656 132.9081  86.6386 133.8099 C  87.2828 133.6167  87.9913 133.6811  88.6355 133.9388 C  93.0158 135.6136  97.3962 137.5461  101.6477 139.4142 C  115.7549 145.5338  129.2180 151.3957  144.4848 152.0398 C  146.9326 152.1687  149.3805 152.2331  151.7639 152.2975 C  151.7639 152.2975 LnUu  104.3717 36.5870 m  93.0343 42.8354  83.7583 52.6268  77.8320 64.2862 C  80.2154 65.4457  82.5344 67.2494  83.6939 69.9549 C  83.6939 69.9549 L  189.5306 69.6328 L  189.5306 69.6328 L  182.2515 51.1452  166.4694 36.3293  147.2732 31.1760 C  132.6506 32.3355  118.2857 34.1392  104.3717 36.5870 C  104.3717 36.5870 LnUu  238.5448 35.5411 m  238.5448 31.6761 L  211.3609 30.2589 L  211.3609 30.2589 L  207.6248 30.0657  203.8242 29.9368  200.0880 29.8080 C  210.3303 40.8233  217.8670 54.3508  221.7320 69.5531 C  221.7320 69.5531 L  233.9712 69.4887 L  233.9712 69.4887 L  233.9068 69.4243  233.7779 69.2954  233.6491 69.1666 C  233.6491 69.1666 L  232.4896 67.9427 L  232.8761 66.2679 L  232.8761 66.2679 L  233.2626 64.6574  233.4559 62.9826  233.4559 61.3078 C  233.4559 58.8599  233.0694 56.3477  232.7473 53.5778 C  232.3608 50.9367  231.9743 48.0379  231.9743 45.0748 C  231.9743 42.7558  232.2319 40.3723  232.9405 37.9245 C  232.9405 37.9245 L  233.5847 35.5411 L  236.0325 35.5411 L  236.7411 35.5411 L  238.5448 35.5411 L  238.5448 35.5411 LnUu  316.7589 53.6121 m  317.7895 48.9097  319.4000 44.3361  321.3969 40.0846 C  308.1914 37.0570  294.9216 34.5448  281.2653 33.8362 C  281.2653 33.8362 L  268.7040 33.1920 L  268.7040 53.8053 L  268.7040 60.3114 L  268.7040 66.7531 L  268.7040 66.7531 L  268.7040 67.7194  268.7040 68.7500  268.7684 69.6519 C  268.7684 69.6519 L  314.8908 69.5230 L  314.8908 69.5230 L  314.8908 69.4586  314.8908 69.3298  314.8908 69.2009 C  314.8908 66.1089  315.0840 63.0169  315.4705 60.0538 C  315.4705 60.0538 L  315.4705 60.0538 L  315.5994 59.4096 L  316.1791 56.2532 L  316.6945 53.6121 L  316.7589 53.6121 L  316.7589 53.6121 LnUu  1257.8727 191.9239 m  1254.7162 191.9239 L  1236.7440 191.9239 L  1236.7440 181.8748 L  1241.7041 181.8748 L  1241.7041 167.8320 L  1252.9126 167.8320 L  1252.9126 181.8748 L  1254.7162 181.8748 L  1254.7162 167.8320 L  1264.4432 167.8320 L  1265.7315 167.8320 L  1271.2713 167.8320 L  1272.4308 167.8320 L  1282.2222 167.8320 L  1282.2222 191.9239 L  1270.2407 191.9239 L  1268.4370 187.1570 L  1266.6978 191.9239 L  1257.8727 191.9239 L  1257.8727 191.9239 LnU*U  0.004 0.000 0.016 0.349 k  0.004 0.000 0.016 0.349 K*u  1133.4628 65.8968 m  1271.8943 65.8968 L  1234.5970 176.6936 L  1169.9870 176.6936 L  1133.4628 65.8968 L  1133.4628 65.8968 LBb0 (Gradient0) 1133.4628 65.8968 90.0000 110.7968 1 0 0 1 0 0 Bg0.0328 110.7968 138.3987 -0.0410 1133.4628 176.6936 BmF2 BBu  637.2910 68.2841 m  637.2910 72.4068 L  670.5300 72.4068 L  670.5300 114.6642 L  637.2910 114.6642 L  637.2910 131.4125 L  688.3090 131.4125 L  677.6159 176.6975 L  583.7607 176.6975 L  583.7607 68.2841 L  637.2910 68.2841 L  637.2910 68.2841 LBb0 (Gradient1) 583.7607 65.8968 90.0000 110.8007 1 0 0 1 0 0 Bg0.0328 110.8007 688.1007 -0.2039 583.7607 176.6975 BmF2 BBUu  818.9324 67.1891 m  804.9539 94.7594 L  844.6346 176.6975 L  789.2363 180.6913 L  770.8131 131.7990 L  752.1966 180.6913 L  695.7676 176.6975 L  736.0925 95.5968 L  722.2429 67.1891 L  818.9324 67.1891 L  818.9324 67.1891 LBb0 (Gradient2) 583.7607 65.8968 90.0000 114.7945 1 0 0 1 0 0 Bg0.0340 114.7945 688.0995 -0.2039 583.7607 180.6913 BmF2 BBUu  934.7248 65.8968 m  934.7248 126.8350 L  966.3534 126.8350 L  966.3534 176.6936 L  855.8787 176.6936 L  844.4125 126.8350 L  881.1300 126.8350 L  881.1300 65.8968 L  934.7248 65.8968 L  934.7248 65.8968 LBb0 (Gradient3) 583.7607 65.8968 90.0000 114.7945 1 0 0 1 0 0 Bg0.0340 114.7945 688.0995 -0.2039 583.7607 180.6913 BmF2 BBUu  1032.7501 128.3810 m  1039.3851 128.3810 L  1039.3851 128.3810 L  1051.6242 128.3810  1057.0997 119.9424  1057.0997 108.3474 C  1057.0997 96.4948  1051.6242 88.1206  1039.3851 88.1206 C  1039.3851 88.1206 L  1032.7501 88.1206 L  1032.7501 128.3810 L  1032.7501 128.3810 LBb0 (Gradient4) 583.7607 65.8968 90.0000 114.7945 1 0 0 1 0 0 Bg0.0340 114.7945 688.0995 -0.2039 583.7607 180.6913 BmF2 BBUu  1215.1432 75.0440 m  1188.2170 75.0440 L  1201.5512 128.3810 L  1202.1310 128.3810 L  1215.1432 75.0440 L  1215.1432 75.0440 LBb0 (Gradient5) 583.7607 65.8968 90.0000 114.7945 1 0 0 1 0 0 Bg0.0340 114.7945 688.0995 -0.2039 583.7607 180.6913 BmF2 BBUu  1090.9184 65.8968 m  1084.5412 80.7771 L  1084.5412 80.7771 L  1101.0963 88.3782  1108.9551 103.1941  1108.9551 121.4240 C  1108.9551 150.5404  1090.9184 176.6936  1045.7623 176.6936 C  1045.7623 176.6936 L  982.3763 176.6936 L  982.3763 65.8968 L  1032.7501 65.8968 L  1032.7501 75.0440 L  1033.6520 75.0440 L  1037.1305 65.8968 L  1090.9184 65.8968 L  1090.9184 65.8968 LBb0 (Gradient6) 583.7607 65.8968 90.0000 114.7945 1 0 0 1 0 0 Bg0.0340 114.7945 688.0995 -0.2039 583.7607 180.6913 BmF2 BBU*U  0.000 0.004 0.004 0.996 k*u  190.6190 153.2618 m  182.1160 158.6083  171.6161 158.3507  161.6959 160.4764 C  142.6930 162.0868  125.6226 156.6114  109.3251 150.6207 C  101.2086 146.8845  92.5768 144.5011  85.6198 138.0594 C  85.6198 138.0594 L  87.4879 136.8999 L  87.4879 136.8999 L  106.0399 144.2434  123.6257 153.3906  144.3678 155.2587 C  164.0149 155.0654  184.6283 156.9335  196.9963 140.6361 C  197.6405 140.1207  198.6067 139.7342  199.3153 140.6361 C  200.2171 146.2403  194.4840 150.2342  190.6190 153.2618 C  190.6190 153.2618 LFu  441.2645 125.4337 m  440.0406 130.6515  444.6786 137.2864  439.1387 140.6361 C  437.5927 138.6392  436.6265 136.7711  437.5927 134.1944 C  438.3657 129.6852  436.1756 125.6914  437.5927 121.6976 C  433.7277 120.6025  430.3781 118.4123  427.1572 115.3203 C  413.3076 114.4185  398.5562 115.4491  384.6422 114.4185 C  384.6422 114.4185 L  383.8692 115.0626 L  386.3170 117.7037 L  386.3170 117.7037 L  390.1820 124.4675  380.0042 119.1853  378.5870 123.3724 C  378.0073 122.5994  378.0073 121.6976  377.6852 121.0534 C  376.1392 119.0565  378.4582 117.7037  379.8754 116.6731 C  380.0042 115.9645  379.8754 115.4491  379.2312 115.0626 C  379.2312 115.0626 L  309.9188 115.0626 L  309.2746 115.8356 L  309.2746 115.8356 L  309.6611 122.4061  310.4986 129.1699  309.5967 135.8692 C  308.7593 136.2557  307.5998 136.2557  306.8912 135.2895 C  306.8912 135.2895 L  306.3759 127.3018 L  306.3759 127.3018 L  305.1520 123.3724  307.7286 119.0565  305.2808 115.3203 C  287.1797 115.0626  268.3056 114.5473  250.5266 115.8356 C  250.5266 115.8356 L  250.2689 129.2987 L  250.2689 129.2987 L  249.3027 129.1699  248.3364 129.5564  247.6278 129.1699 C  245.8886 124.4675  249.2383 119.5718  246.4039 115.3203 C  246.4039 115.3203 L  203.6312 114.8694 L  201.8275 115.8356 L  201.8275 115.8356 L  202.2140 118.2835  199.7662 122.1485  203.1803 123.3724 C  203.5024 124.7896  205.3705 126.7865  203.3736 128.2037 C  201.1834 131.5533  198.8644 125.3693  196.7386 129.2987 C  196.7386 129.2987 L  166.5272 129.2987 L  77.7609 127.6883 L  77.7609 127.6883 L  72.7364 124.9184  77.1168 119.0565  74.9910 115.0626 C  62.3654 115.9645  49.2888 114.2252  37.5649 115.8356 C  37.9514 117.7037  37.5649 119.9583  38.7244 121.5687 C  38.4667 127.6883  38.4023 134.7742  32.0895 137.7373 C  30.3502 138.7036  28.0957 137.8017  26.8717 136.6422 C  20.3657 131.1668  25.9699 122.1485  22.9423 115.4491 C  16.6295 113.5811  8.7706 118.7344  3.8750 112.8725 C  3.8750 112.8725 L  3.1664 75.8973 L  5.1633 73.1274 L  18.9485 73.3850 L  18.9485 73.3850 L  22.2337 69.2624  27.9024 68.7470  30.7367 63.9802 C  32.2183 61.5323  27.9668 61.6612  26.6785 60.5661 C  25.5834 58.4403  25.1325 56.0569  25.4546 53.4158 C  25.5834 51.6122  26.6785 50.0662  28.5466 50.0662 C  33.8287 53.4803  33.6999 60.5661  34.5373 66.0415 C  34.5373 66.0415 L  40.7858 73.1274 L  40.7858 73.1274 L  48.3225 71.7102  55.6660 73.5783  63.5249 73.3850 C  64.6199 72.6120  67.5187 74.2869  66.8745 72.0323 C  67.8408 63.5293  65.1353 54.8330  66.6169 46.0723 C  70.1598 47.7472  68.8714 52.5140  69.0003 55.9281 C  71.2549 58.6980  68.6138 62.6919  71.2549 65.3974 C  75.3775 66.2992  80.7241 68.2961  81.2395 73.1274 C  81.2395 73.1274 L  241.1217 72.6764 L  241.1217 72.6764 L  240.2843 70.6795  237.7721 68.8114  236.0328 66.9434 C  238.2874 57.3453  233.3917 48.1981  236.0328 38.7288 C  236.0328 38.7288 L  236.7414 38.7288 L  236.7414 38.7288 L  240.0267 44.3331  238.7383 51.6122  239.6402 58.1827 C  240.2843 61.5323  244.5358 60.6949  247.2413 62.0477 C  251.6217 64.8820  253.1033 69.6489  254.9713 73.9004 C  255.7443 74.4801  256.3885 73.5139  256.9683 72.9341 C  256.9683 72.9341 L  344.8971 72.6764 L  346.5719 71.6458 L  346.5719 71.6458 L  355.1393 73.9004  364.8663 72.0323  373.8202 72.1611 C  373.8202 63.9802  373.8202 55.9281  372.8539 48.1981 C  372.8539 48.1981 L  373.9490 46.9742 L  373.9490 46.9742 L  375.8171 46.4588  376.2680 48.7134  376.5901 50.0662 C  376.7189 56.0569  377.4919 63.0784  376.7834 69.2624 C  377.4919 73.9004  382.4520 70.1642  384.8354 72.6764 C  384.8354 72.6764 L  483.6507 72.0323 L  567.5213 72.0323 L  567.5213 72.0323 L  569.9691 72.1611  572.6102 67.3943  573.9629 71.7102 C  573.9629 71.7102 L  583.6899 71.7102 L  583.6899 74.8022 L  574.1562 74.4801 L  574.1562 74.4801 L  574.2850 76.7991  573.9629 79.3114  574.2850 81.6304 C  574.2850 81.6304 L  583.6899 81.6304 L  583.6899 84.8512 L  574.6071 84.4003 L  574.1562 89.2315 L  574.1562 89.2315 L  573.7053 94.7714  580.3402 90.5843  583.6899 91.8082 C  583.6899 91.8082 L  583.6899 94.7714 L  583.6899 94.7714 L  581.1132 94.9002  578.9230 94.2560  576.3464 94.4493 C  573.0611 94.4493  574.6071 99.3450  574.1562 101.5995 C  574.1562 101.5995 L  583.6899 101.9860 L  583.6899 104.9492 L  583.6899 104.9492 L  580.3402 105.4646  576.1531 102.6302  574.1562 105.4646 C  575.4445 107.5903  572.7390 109.7161  574.1562 111.7774 C  574.1562 111.7774 L  583.6899 111.7774 L  583.6899 113.9676 L  583.6899 113.9676 L  556.6348 114.2252  529.3222 115.7712  502.2027 114.4185 C  500.0770 118.0902  503.1045 125.0472  498.0156 126.2712 C  495.6966 122.4706  498.8530 118.4123  497.1138 114.4185 C  495.2457 114.8050  493.2488 114.5473  491.8316 115.4491 C  491.8316 121.5043  488.9329 126.2712  484.7458 130.5227 C  475.6630 135.9337  462.4576 133.8723  454.0834 128.6546 C  453.4393 127.5595  453.1816 125.6914  454.7276 125.3693 C  463.2306 129.1699  476.5004 130.6515  484.2949 124.2742 C  486.4206 121.5687  487.9666 118.4123  487.3869 114.8694 C  487.3869 114.8694 L  442.3596 115.3203 L  442.3596 115.3203 L  441.2645 115.9645  442.4884 117.3172  441.9731 118.6056 C  439.0743 120.5381  442.2307 123.3724  441.2645 125.4337 C  441.2645 125.4337 LFUu  18.3687 94.4493 m  17.8534 95.4800  16.9516 94.9002  16.6295 94.2560 C  17.2092 94.4493  17.8534 93.9984  18.3687 94.4493 C  18.3687 94.4493 LFUu  545.0398 66.2992 m  543.5582 67.3943  541.6902 67.7808  539.7577 67.6519 C  534.6687 66.2992  528.9357 66.4280  523.2670 66.4280 C  520.4326 66.0415  514.6996 67.8452  515.7946 63.0784 C  517.8560 59.6643  522.4296 61.6612  525.7148 60.5661 C  525.4571 59.7931  525.4571 59.1489  524.6841 58.4403 C  522.6872 48.3269  523.7179 36.7319  523.7179 26.1032 C  523.7179 26.1032 L  524.6841 25.9099 L  524.6841 25.9099 L  526.5522 27.0050  527.4541 29.1307  527.3252 31.5142 C  525.4571 37.9558  527.1320 45.4282  527.4541 52.0631 C  527.4541 52.0631 L  532.0921 53.4158 L  532.0921 53.4158 L  535.7638 55.1551  537.9540 59.1489  538.7914 62.6919 C  538.7914 62.6919 L  543.0429 63.0784 L  543.0429 63.0784 L  544.2668 63.3360  546.0061 64.8820  545.0398 66.2992 C  545.0398 66.2992 LFUu  355.3970 41.6920 m  356.1700 42.4650  356.1700 44.0110  355.1393 44.4619 C  330.8542 38.8577  306.8268 33.1890  281.4466 30.6123 C  281.4466 30.6123 L  211.5545 27.0050 L  211.5545 27.0050 L  173.0333 25.7811  134.5121 27.2627  98.9540 34.2841 C  94.1228 34.8638  88.9695 40.7257  84.5891 36.0877 C  104.0430 26.1032  127.1042 25.1369  149.7144 23.1400 C  219.2845 20.7566  289.6920 22.2382  352.4338 39.8239 C  352.4338 39.8239 L  355.3970 41.6920 L  355.3970 41.6920 LFUu  34.5373 127.3018 m  34.7306 123.0503  35.3103 117.8326  31.3165 115.4491 C  29.5772 115.4491  26.2276 115.0626  27.1294 118.0902 C  27.0006 121.0534  28.3533 124.2742  26.8717 126.9153 C  27.9024 128.7834  27.9024 131.4245  29.5772 132.9061 C  33.1846 133.5502  33.5711 129.5564  34.5373 127.3018 C  34.5373 127.3018 LFUu  198.2202 121.5687 m  198.6067 119.5718  198.6067 116.6731  197.3184 115.3203 C  188.9442 115.4491  180.6344 116.9307  172.2603 115.8356 C  171.1652 117.6393  171.6805 120.6025  171.9382 122.1485 C  180.7633 122.4061  189.7172 123.0503  198.2202 121.5687 C  198.2202 121.5687 LFUu  167.3002 115.8356 m  137.0887 115.8356 L  137.0887 121.9552 L  137.0887 121.9552 L  147.3310 122.1485  157.4444 122.9215  167.7511 122.1485 C  167.7511 122.1485 L  167.3002 115.8356 L  167.3002 115.8356 LFUu  133.0949 121.9552 m  132.6440 120.2804  132.7728 118.0902  132.7728 116.2866 C  124.3987 115.0626  115.3159 116.6731  107.1350 115.8356 C  106.4908 117.1884  106.8129 118.7344  105.0736 119.7006 C  103.7209 120.1516  102.6258 119.0565  102.3037 117.7037 C  102.3037 117.7037 L  102.3037 115.4491 L  79.4358 115.9645 L  79.4358 115.9645 L  78.8560 117.6393  79.2425 119.3141  78.9849 121.0534 C  97.0860 120.1516  114.9938 121.9552  133.0949 121.9552 C  133.0949 121.9552 LFUu  30.8656 113.0657 m  30.3502 111.1976  29.4484 109.5872  27.9668 108.2345 C  28.0957 110.0381  26.8717 111.9706  28.3533 113.5811 C  28.9975 113.3234  29.9637 113.0657  30.8656 113.0657 C  30.8656 113.0657 LFUu  75.1199 112.6792 m  74.9910 105.8511 L  34.5373 105.4646 L  34.5373 105.4646 L  34.0864 105.0781  33.1846 104.8204  33.5711 104.0474 C  44.7796 102.3726  57.4053 102.3726  69.0003 103.0811 C  67.9696 100.9554  64.7488 98.6364  66.1015 95.9953 C  66.1015 95.9953 L  36.5987 95.9953 L  36.5987 95.9953 L  35.0527 98.4431  32.0895 96.7683  29.4484 97.6057 C  28.8042 103.8541  34.5373 107.3326  35.6968 112.6792 C  35.6968 112.6792 L  36.9207 113.5811 L  36.9207 113.5811 L  49.4176 112.4216  62.2365 113.3234  75.1199 112.6792 C  75.1199 112.6792 LFUu  102.3037 112.5504 m  102.6902 111.1976  101.8528 110.2314  102.1749 109.2007 C  101.0798 109.5872  98.9540 109.5872  98.4387 107.7191 C  98.4387 107.7191 L  98.4387 105.8511 L  78.9849 105.8511 L  78.9849 105.8511 L  78.6628 107.3326  78.6628 111.5841  79.8867 113.5811 C  79.8867 113.5811 L  102.3037 112.5504 L  102.3037 112.5504 LFUu  132.6440 106.0443 m  111.7730 105.4646 L  111.7730 105.4646 L  111.1288 106.9461  113.1257 109.5872  110.6779 110.0381 C  108.8098 110.0381  107.7791 108.2345  106.4908 107.1394 C  106.5552 108.6854  104.6871 113.0657  107.9080 113.5811 C  107.9080 113.5811 L  132.6440 112.8725 L  132.6440 106.0443 L  132.6440 106.0443 LFUu  197.7693 112.6792 m  198.2202 110.5535  197.4472 108.2345  197.6405 105.8511 C  189.1375 106.8173  179.6682 106.0443  171.0364 105.4646 C  170.6499 108.1056  170.6499 111.1976  171.6805 113.5811 C  180.1191 112.4216  189.2663 113.3234  197.7693 112.6792 C  197.7693 112.6792 LFUu  305.4096 111.4553 m  305.2808 109.5872  302.3820 111.1976  301.4158 109.7161 C  298.1305 107.9124  295.6827 103.2744  291.0447 105.0781 C  278.0969 105.8511  264.3118 105.8511  251.1063 105.0781 C  251.1063 105.0781 L  253.1033 102.6302 L  294.3300 102.6302 L  294.3300 102.6302 L  294.7809 100.3112  293.5570 96.7683  296.9066 96.3174 C  301.9955 95.4800  305.7317 99.6026  309.2746 103.0811 C  321.1917 100.9554  333.5597 103.5965  345.9278 102.5014 C  345.9278 102.5014 L  345.7989 95.4800 L  248.8518 95.4800 L  248.8518 95.4800 L  248.4008 94.9002  246.9837 94.4493  247.7567 93.6119 C  247.7567 93.6119 L  249.7536 93.0965 L  345.3480 92.7100 L  345.9278 85.4954 L  154.4813 85.8819 L  154.4813 85.8819 L  138.0550 86.2684  121.1778 85.8819  104.9448 85.3665 C  103.7209 85.7530  104.0430 87.9432  104.5583 88.7162 C  107.4571 95.7376  115.3159 92.1303  121.0490 93.0965 C  121.0490 90.9064  120.7269 88.3941  123.0459 87.3635 C  128.0060 86.3972  132.6440 89.2315  135.6072 92.9033 C  135.6072 92.9033 L  189.8460 92.9033 L  189.8460 92.9033 L  190.2325 93.0965  190.3614 93.8695  191.0055 93.6119 C  190.6190 91.4861  189.7172 87.3635  193.0025 86.9770 C  196.3521 86.7193  199.7662 87.1702  202.0852 89.7469 C  202.0852 89.7469 L  204.4686 93.0965 L  204.4686 93.0965 L  216.0636 92.4524  228.6893 93.8695  239.6402 91.8082 C  243.3763 92.9033  247.6278 93.4830  249.7536 97.3480 C  251.7505 99.7315  248.6585 102.6302  250.6554 105.0781 C  249.3027 107.5903  250.2689 110.6823  250.9775 113.0657 C  268.8209 112.8725  287.6950 112.5504  305.2808 113.3234 C  305.2808 113.3234 L  305.4096 111.4553 L  305.4096 111.4553 LFUu  11.9915 112.0995 m  12.2491 110.0381  11.4761 108.2345  11.8626 106.0443 C  10.7676 105.3357  9.0283 105.4646  7.8044 105.8511 C  6.2584 107.9124  7.9976 110.2314  7.9976 112.5504 C  9.3504 112.6792  11.6694 114.4185  11.9915 112.0995 C  11.9915 112.0995 LFUu  166.7849 106.6885 m  156.9291 104.3695  146.7513 107.1394  136.5090 106.0443 C  136.5090 106.0443 L  137.0887 113.0657 L  167.0425 113.0657 L  166.7849 106.6885 L  166.7849 106.6885 LFUu  24.1018 111.0044 m  24.6816 109.2007  22.8135 108.1056  24.4883 106.6885 C  22.2337 104.3695  18.7552 106.3664  16.1141 105.8511 C  16.1141 105.8511 L  15.5344 112.0995 L  15.5344 112.0995 L  18.3687 112.0995  22.3626 114.5473  24.1018 111.0044 C  24.1018 111.0044 LFUu  246.3395 112.6792 m  245.7598 110.0381  247.7567 106.6885  245.4377 104.8204 C  231.5237 105.8511  216.0636 106.0443  202.0852 105.3357 C  201.1834 107.7191  202.0852 110.2314  202.0852 112.6792 C  216.7078 113.0657  232.1034 111.9706  246.3395 112.6792 C  246.3395 112.6792 LFUu  345.9278 112.6792 m  346.8940 110.5535  345.7989 107.7191  345.7989 105.3357 C  333.9462 105.7222  321.5138 105.8511  309.9188 105.0781 C  310.8851 108.1056  307.1489 110.2314  309.6611 112.8725 C  321.5138 111.4553  333.7530 112.6792  345.9278 112.6792 C  345.9278 112.6792 LFUu  379.1024 111.9706 m  378.5870 109.5872  376.2680 107.9124  375.8171 105.4646 C  367.5074 105.0781  359.1332 106.6885  351.4032 105.0781 C  349.6639 107.1394  350.1793 110.0381  350.8878 112.5504 C  350.8878 112.5504 L  379.1024 111.9706 L  379.1024 111.9706 LFUu  426.2554 111.9706 m  426.1266 110.1026  427.9947 108.6854  429.4762 107.7191 C  433.8566 106.9461  437.0774 110.1026  440.4915 112.0995 C  440.4915 112.0995 L  497.1138 112.0995 L  496.4696 105.3357 L  381.3569 105.3357 L  381.3569 105.3357 L  380.7772 106.9461  382.8385 105.7222  383.5471 106.3664 C  384.8354 107.9124  387.0900 110.1026  385.8661 112.5504 C  385.8661 112.5504 L  426.2554 111.9706 L  426.2554 111.9706 LFUu  569.4538 111.5841 m  569.3249 109.2007  569.9691 107.3326  569.7114 105.0781 C  569.7114 105.0781 L  500.7211 105.0781 L  501.7518 111.9706 L  569.4538 111.5841 L  569.4538 111.5841 LFUu  24.4883 103.0811 m  25.4546 98.4431  17.8534 97.3480  19.0773 92.5812 C  16.3074 87.7500  16.3074 81.1150  17.4025 75.4464 C  16.9516 75.1243  16.1141 75.4464  15.4056 75.3819 C  13.3442 83.3052  17.4025 91.0352  15.4056 98.4431 C  15.2123 100.5045  15.5344 102.1793  16.5006 103.8541 C  18.9485 102.3726  21.8472 102.6302  24.4883 103.0811 C  24.4883 103.0811 LFUu  10.7676 75.4464 m  9.4792 75.4464  8.1265 75.4464  7.1602 76.4770 C  7.1602 79.1181  6.0007 82.5322  7.9976 84.8512 C  6.2584 87.1702  6.2584 91.8082  7.9976 94.2560 C  5.6142 96.7683  8.1265 99.9891  7.8044 102.9523 C  7.8044 102.9523 L  11.3473 103.5965 L  11.3473 103.5965 L  12.7645 94.2560  9.6081 85.0445  10.7676 75.4464 C  10.7676 75.4464 LFUu  197.6405 102.5014 m  199.3153 97.8634  193.5822 97.8634  191.5853 95.4800 C  183.9841 96.3174  175.8032 95.9953  168.2020 95.8665 C  171.2940 97.6057  169.8124 101.9860  172.7112 103.5965 C  180.7633 102.5014  189.2663 102.9523  197.6405 102.5014 C  197.6405 102.5014 LFUu  98.3099 102.9523 m  98.3099 101.5995  99.2117 100.1824  98.3099 98.7652 C  93.0921 93.0965  83.4940 98.1210  77.3744 94.7714 C  81.1106 91.8082  87.1658 92.9033  92.0615 92.9033 C  92.7056 90.7131  95.5400 91.6150  96.8927 92.1303 C  97.3436 92.7100  97.7945 93.0965  98.4387 93.0965 C  99.5338 90.5843  97.7945 88.2653  95.5400 87.1702 C  95.5400 87.1702 L  88.8406 85.4954 L  42.1385 85.3665 L  39.5618 93.0965 L  39.5618 93.0965 L  52.0587 92.9033  65.0064 92.5812  76.8591 94.2560 C  77.7609 97.3480  82.7210 99.0873  81.2395 102.5014 C  86.5860 103.5965  92.7056 103.0811  98.3099 102.9523 C  98.3099 102.9523 LFUu  132.7728 102.6302 m  133.2237 102.3726  133.0949 101.7284  133.0949 101.4707 C  128.7790 101.2130  124.9140 99.2161  122.1441 95.8665 C  117.7637 96.6395  112.0306 94.7714  108.2945 97.3480 C  106.9417 97.3480  106.5552 95.3511  105.0736 95.9953 C  103.5921 99.3450  107.7791 101.5995  109.7761 103.0811 C  109.7761 103.0811 L  132.7728 102.6302 L  132.7728 102.6302 LFUu  238.7383 102.6302 m  236.0328 101.2130  234.8733 98.4431  233.9071 95.9953 C  224.5667 95.7376  214.4532 95.7376  205.0484 95.9953 C  204.8551 99.6026  197.6405 98.7652  201.1834 103.0811 C  213.4226 101.9860  226.3059 103.4676  238.7383 102.6302 C  238.7383 102.6302 LFUu  156.1561 95.9953 m  137.0887 95.8665 L  136.8311 102.9523 L  159.4413 102.9523 L  156.1561 95.9953 L  156.1561 95.9953 LFUu  375.2374 102.1793 m  374.8509 99.6026  376.5901 97.6057  378.5870 95.9953 C  378.5870 95.9953 L  379.2312 95.9953 L  350.1793 95.8665 L  350.9523 102.6302 L  375.2374 102.1793 L  375.2374 102.1793 LFUu  495.7610 102.5014 m  490.8654 102.1793  487.0004 99.2161  483.1998 95.3511 C  483.1998 95.3511 L  386.1882 95.4800 L  386.1882 95.4800 L  388.1851 96.3174  390.3753 97.3480  391.4704 99.6026 C  391.4704 99.6026 L  390.1820 102.1793 L  390.1820 102.1793 L  420.5223 101.7284  450.8626 103.0811  481.0096 101.9860 C  481.0096 101.9860 L  495.7610 102.5014 L  495.7610 102.5014 LFUu  388.1851 102.1793 m  386.3170 100.9554  383.5471 101.0842  381.3569 101.4707 C  381.3569 101.4707 L  380.9704 102.5014 L  388.1851 102.1793 L  388.1851 102.1793 LFUu  569.4538 101.5995 m  569.8403 95.4800 L  567.9722 95.0935 L  500.7211 94.9002 L  500.4635 94.7714 L  500.4635 94.7714 L  498.9819 96.9615  500.4635 99.9891  500.8500 102.5014 C  523.5891 101.2130  546.5214 102.1793  569.4538 101.5995 C  569.4538 101.5995 LFUu  493.7641 95.0935 m  492.7979 94.7714  491.7028 94.9002  490.4789 94.9002 C  489.8991 97.2192  492.7979 95.0935  493.6997 96.6395 C  493.6997 96.6395 L  493.7641 95.0935 L  493.7641 95.0935 LFUu  23.8442 90.7131 m  23.8442 91.8082  24.2307 92.9033  25.1325 93.8695 C  25.1325 93.8695 L  25.7122 93.8695 L  23.8442 90.7131 L  23.8442 90.7131 LFUu  491.7028 92.5812 m  490.8654 90.5843  488.8685 90.0045  487.0004 90.2622 C  486.4206 90.1334  485.7764 90.2622  486.0985 90.9064 C  486.7427 92.5812  489.5126 93.6119  491.7028 92.5812 C  491.7028 92.5812 LFUu  481.9114 92.1303 m  483.1998 91.6150  481.2673 91.2285  481.5249 90.5843 C  482.4268 89.0383  481.0096 86.7193  483.1354 85.4954 C  483.1354 85.4954 L  392.0501 85.3665 L  392.0501 85.3665 L  387.7342 91.0352  381.6146 84.9800  376.2680 85.3665 C  367.6362 85.3665  359.0043 86.3972  350.4369 85.3665 C  349.6639 87.6211  349.6639 90.5843  350.4369 92.7100 C  350.4369 92.7100 L  481.9114 92.1303 L  481.9114 92.1303 LFUu  569.8403 91.8082 m  570.2912 89.3604  570.2912 87.3635  569.8403 84.9800 C  543.5582 84.0782  516.5676 85.4954  490.7365 85.3665 C  493.3776 86.2684  496.4696 88.8450  496.9850 91.8082 C  520.4326 92.7100  545.4907 90.9064  569.8403 91.8082 C  569.8403 91.8082 LFUu  36.4698 86.0751 m  35.0527 84.5291  37.1784 83.4985  37.1784 82.0169 C  37.1784 79.2469  36.2766 76.4770  34.5373 74.9310 C  34.5373 74.9310 L  33.5711 75.1243 L  33.5711 75.1243 L  33.8287 78.4095  31.3165 81.5015  32.8625 84.4003 C  31.6386 86.3972  31.4453 88.8450  31.3165 91.4861 C  31.3165 91.4861 L  32.0895 92.0015 L  32.0895 92.0015 L  33.8287 90.7131  36.5987 88.7162  36.4698 86.0751 C  36.4698 86.0751 LFUu  22.8135 86.2684 m  22.1693 85.4954 L  22.1693 85.4954 L  21.2675 85.7530  21.4607 86.9770  21.8472 87.6211 C  22.8135 88.8450  23.2644 86.8481  22.8135 86.2684 C  22.8135 86.2684 LFUu  27.9024 86.0751 m  27.9024 85.3665 L  26.4852 85.3665 L  26.4852 85.3665 L  25.9699 86.3972  28.5466 88.8450  27.9024 86.0751 C  27.9024 86.0751 LFUu  23.8442 79.7623 m  26.0987 80.2776  24.2307 85.4954  27.9668 82.9831 C  29.4484 81.1150  28.5466 78.3451  28.9975 76.0261 C  26.8717 76.3482  24.6816 73.5139  22.8135 76.0261 C  20.8166 78.1519  20.4945 81.1150  20.9454 83.8850 C  20.9454 83.8850 L  21.7184 84.4003 L  21.7184 84.4003 L  22.1693 82.6610  22.3626 81.1150  23.8442 79.7623 C  23.8442 79.7623 LFUu  94.5737 81.1150 m  97.7945 82.5322 L  97.7945 82.5322 L  97.9878 80.9862  96.9571 78.6672  98.7608 77.6365 C  100.3068 79.3114  105.5246 78.1519  104.0430 82.5322 C  104.0430 82.5322 L  105.5246 83.1120 L  227.2722 82.5322 L  345.7989 82.5322 L  345.7989 82.5322 L  346.3143 80.5353  346.3143 77.7654  345.7989 75.8973 C  336.8450 75.8973  328.0843 74.5445  319.5169 76.0261 C  319.5169 76.0261 L  317.3267 75.1243 L  176.3829 75.4464 L  83.1075 75.4464 L  83.1075 75.4464 L  83.4940 76.9924  84.2026 78.4095  83.7517 79.7623 C  81.6260 82.4034  78.6628 83.3052  75.3775 82.5322 C  70.8684 78.7960  67.1966 73.3850  60.2396 75.8973 C  54.5065 75.3819  47.5495 75.7684  41.6876 75.4464 C  41.2367 77.8942  41.1723 80.9862  41.8164 83.1120 C  41.8164 83.1120 L  91.2240 82.6610 L  94.5737 81.1150 L  94.5737 81.1150 LFUu  375.1085 82.5322 m  374.8509 79.7623  371.7589 78.4095  372.5963 75.3819 C  364.9951 75.3819  356.6853 74.4801  349.6639 76.0261 C  349.6639 76.0261 L  350.1793 82.6610 L  350.1793 82.6610 L  358.4890 82.0169  366.5411 82.2101  375.1085 82.5322 C  375.1085 82.5322 LFUu  569.4538 81.6304 m  569.4538 79.6334  570.4200 77.3789  569.4538 75.3819 C  569.4538 75.3819 L  567.4568 74.9310 L  406.4795 75.1243 L  406.4795 75.1243 L  404.4181 74.8022  401.9703 74.9310  399.8445 74.9310 C  400.4243 76.4770  402.5500 78.3451  401.3261 79.7623 C  399.4580 80.9862  397.4611 79.7623  395.7863 79.2469 C  394.6912 78.1519  393.9182 76.9924  393.9182 75.4464 C  393.9182 75.4464 L  389.4735 75.3819 L  392.5655 82.5322 L  569.4538 81.6304 L  569.4538 81.6304 LFUu  387.4765 81.1150 m  385.6084 77.6365  381.0993 76.0261  377.4919 76.4770 C  378.4582 80.2132  382.3232 80.2776  384.8354 81.7592 C  385.6084 81.2439  386.8324 82.0169  387.4765 81.1150 C  387.4765 81.1150 LFUu  78.3407 77.3789 m  78.9849 74.9310  73.8315 74.9310  75.6996 72.1611 C  74.1536 71.0660  72.7364 69.7133  70.4819 70.2930 C  69.5156 70.6795  70.1598 71.7102  69.9665 72.6764 C  71.3837 74.0292  76.0217 71.5169  75.3775 74.9310 C  75.3775 75.3819  74.9910 75.8973  74.4757 75.4464 C  74.4757 75.4464 L  73.8315 75.4464 L  73.8315 75.4464 L  74.6045 77.6365  76.4726 77.6365  78.3407 77.3789 C  78.3407 77.3789 LFUu  29.9637 71.6458 m  29.3196 71.6458  28.0957 71.5169  28.3533 72.6120 C  28.3533 72.6120 L  29.9637 72.6120 L  29.9637 71.6458 L  29.9637 71.6458 LFUu  248.8518 70.6795 m  249.1094 67.2010  244.7935 66.7501  242.6033 65.3974 C  241.8947 66.0415  239.3825 64.5599  240.0267 66.7501 C  240.2843 68.8114  242.6033 68.7470  243.8917 70.0354 C  245.7598 70.0354  247.2413 71.0660  248.8518 70.6795 C  248.8518 70.6795 LFUu  302.6397 122.1485 m  302.3820 123.3724  301.5446 123.8233  300.6428 124.3387 C  288.1460 131.4245  269.9804 129.1699  259.2228 119.9583 C  259.2228 118.4123  256.8394 116.7375  258.8363 115.8356 C  268.6277 124.3387  283.4435 125.8202  296.2625 122.5994 C  298.3238 122.4061  299.5477 118.0902  302.0600 119.9583 C  302.5109 120.6025  302.5109 121.5043  302.6397 122.1485 C  302.6397 122.1485 LFU*U  0.000 0.561 0.522 0.361 k*u  217.9837 68.1212 m  192.4103 68.1212 L  192.4103 68.1212 L  182.7478 44.0938  159.4934 25.9927  132.5672 25.9927 C  105.5121 25.9927  82.2577 44.0938  72.5952 68.1212 C  72.5952 68.1212 L  47.0218 68.1212 L  47.0218 68.1212 L  57.5217 30.5019  91.9202 3.7689  132.5672 3.7689 C  173.0853 3.7689  207.4194 30.5663  217.9837 68.1212 C  217.9837 68.1212 LFu  241.7709 68.1349 m  241.7709 3.7826 L  265.4762 7.7764 L  265.4762 66.7822 L  265.4762 66.7822 L  265.4762 67.2331  265.4762 67.6840  265.4762 68.1349 C  265.4762 68.1349 L  241.7709 68.1349 L  241.7709 68.1349 LFUu  318.1376 68.1122 m  341.7786 68.1122 L  341.7786 68.1122 L  341.9718 64.2472  342.6804 60.5110  343.8399 56.8392 C  349.4441 39.7688  365.1618 26.0480  382.4899 26.0480 C  395.8242 26.0480  404.6493 32.4253  413.3455 40.7995 C  413.3455 40.7995 L  428.5479 25.4039 L  428.5479 25.4039 L  416.0510 12.1340  400.1401 3.7599  381.7169 3.7599 C  352.4717 3.7599  325.1590 26.1769  319.3615 56.8392 C  318.5885 60.5110  318.2020 64.2472  318.1376 68.1122 C  318.1376 68.1122 LFUu  447.4344 68.1251 m  447.4344 3.7728 L  471.1398 7.7666 L  471.1398 68.1251 L  447.4344 68.1251 L  447.4344 68.1251 LFUu  534.0105 68.1251 m  534.0105 3.7728 L  557.7159 7.7666 L  557.7159 68.1251 L  534.0105 68.1251 L  534.0105 68.1251 LFU*U  0.000 0.561 0.522 0.361 k*u  265.4762 68.1349 m  265.9916 99.5059  284.0283 114.5794  304.8993 113.4199 C  304.8993 113.4199 L  314.7550 137.1252 L  303.0312 137.1252 L  303.0312 137.1252 L  283.7062 137.1252  271.5958 125.5302  264.5100 109.6193 C  264.5100 109.6193 L  264.0591 109.6193 L  264.0591 136.5455 L  241.7709 132.6160 L  241.7709 68.1349 L  265.4762 68.1349 L  265.4762 68.1349 LFu  341.7786 68.1122 m  318.1376 68.1122 L  318.1376 68.1122 L  318.1376 68.4987  318.1376 68.8207  318.1376 69.2072 C  318.1376 105.9892  344.2908 136.6516  381.7169 136.6516 C  398.9162 136.6516  414.8271 130.4675  427.8393 119.1302 C  427.8393 119.1302 L  413.4744 102.7684 L  413.4744 102.7684 L  402.9744 110.7560  396.0818 114.3634  381.9102 114.3634 C  358.0760 114.3634  341.7141 92.9770  341.7141 70.0447 C  341.7141 69.4005  341.7141 68.7563  341.7786 68.1122 C  341.7786 68.1122 LFUu  557.7159 68.1251 m  557.7159 74.9532 L  557.7159 94.6647 L  557.7159 94.6647 L  557.7159 124.4253  534.0105 136.6000  508.6947 136.6000 C  493.7501 136.6000  478.7410 130.8669  472.5570 120.8824 C  472.5570 120.8824 L  471.1398 120.8824 L  471.1398 182.2715 L  447.4344 178.2777 L  447.4344 74.9532 L  447.4344 68.1251 L  471.1398 68.1251 L  471.1398 74.9532 L  471.1398 77.3367 L  471.1398 77.3367 L  471.1398 104.2628  487.6949 115.7290  506.4402 115.7290 C  520.9339 115.7290  534.0105 109.6738  534.0105 91.1862 C  534.0105 91.1862 L  534.0105 74.9532 L  534.0105 68.1251 L  557.7159 68.1251 L  557.7159 68.1251 LFUu  217.9837 68.1212 m  218.5635 70.2470  219.0788 72.3727  219.5297 74.5629 C  220.5604 80.2960  221.3334 86.2867  221.3334 92.4063 C  221.3334 142.3293  181.2662 180.9793  132.5672 180.9793 C  83.6749 180.9793  43.7365 142.3293  43.7365 92.4063 C  43.7365 86.2867  44.3807 80.2960  45.4758 74.5629 C  45.9267 72.3727  46.4420 70.2470  47.0218 68.1212 C  47.0218 68.1212 L  72.5952 68.1212 L  72.5952 68.1212 L  71.6934 70.2470  70.9848 72.3727  70.3406 74.5629 C  68.7946 80.2960  67.8284 86.2867  67.8284 92.4063 C  67.8284 127.6423  97.0091 158.8844  132.5672 158.8844 C  167.9964 158.8844  197.1771 127.6423  197.1771 92.4063 C  197.1771 86.2867  196.2753 80.2960  194.6005 74.5629 C  193.9563 72.3727  193.2477 70.2470  192.4103 68.1212 C  192.4103 68.1212 L  217.9837 68.1212 L  217.9837 68.1212 LFU*U  0.000 0.561 0.522 0.361 k*u  1254.6544 185.0836 m  1254.6544 188.6910 L  1239.9674 188.6910 L  1239.9674 185.0836 L  1244.9275 185.0836 L  1244.9275 171.0408 L  1249.6943 171.0408 L  1249.6943 185.0836 L  1254.6544 185.0836 L  1254.6544 185.0836 LFu  1268.4396 177.9334 m  1264.4458 188.6910 L  1257.9397 188.6910 L  1257.9397 171.0408 L  1262.5133 171.0408 L  1262.5133 183.0867 L  1262.5777 183.0867 L  1266.7648 171.0408 L  1270.1788 171.0408 L  1274.4948 183.0867 L  1274.4948 183.0867 L  1274.4948 171.0408 L  1279.0039 171.0408 L  1279.0039 188.6910 L  1272.4978 188.6910 L  1268.4396 177.9334 L  1268.4396 177.9334 LFU*U  0.000 0.561 0.522 0.361 k*u  1032.7501 65.9006 m  982.3763 65.9006 L  982.3763 3.4808 L  1032.7501 7.4746 L  1032.7501 65.9006 L  1032.7501 65.9006 LFu  583.7607 68.2235 m  583.7607 7.4785 L  681.0944 7.4785 L  692.0452 54.3739 L  637.2910 54.3739 L  637.2910 68.2235 L  583.7607 68.2235 L  583.7607 68.2235 LFUu  722.2429 67.1928 m  692.9333 7.4785 L  749.9421 3.4847 L  769.7180 57.5947 L  790.7178 3.4847 L  849.2082 7.4785 L  818.9324 67.1928 L  722.2429 67.1928 L  722.2429 67.1928 LFUu  881.1300 66.2871 m  881.1300 3.4808 L  934.7248 7.4746 L  934.7248 66.2871 L  881.1300 66.2871 L  881.1300 66.2871 LFUu  1114.9110 9.7120 m  1090.9479 66.0122 L  1037.1600 66.0122 L  1060.2856 3.5280 L  1115.0398 7.4574 L  1170.2449 3.5280 L  1178.8124 32.8376 L  1225.3212 32.8376 L  1233.6954 3.5280 L  1291.6060 7.5218 L  1271.8945 65.8834 L  1133.4630 65.8834 L  1114.9110 9.7120 L  1114.9110 9.7120 LFU*U  0.000 0.561 0.522 0.361 k*u  639.5628 107.4316 m  639.9493 108.8487  640.2069 110.3303  639.4339 111.6831 C  630.6088 111.5543  621.8482 112.1340  613.1519 112.3273 C  611.6059 111.2322  611.9924 109.3641  612.2501 107.4960 C  612.3789 106.6586  612.3789 105.6923  612.2501 104.9193 C  612.2501 104.9193 L  639.3051 104.9193 L  639.3051 104.9193 L  639.3051 105.6923  639.4339 106.5942  639.5628 107.4316 C  639.5628 107.4316 LFu  1049.6643 95.0398 m  1046.0570 92.7207 L  1045.5417 92.3987 L  1045.5417 92.3987 L  1043.8024 91.6901  1041.8055 91.3680  1039.4221 91.3680 C  1039.4221 91.3680 L  1036.4589 91.3680 L  1036.4589 91.3680 L  1036.4589 92.0766  1036.2657 92.7852  1036.0080 93.3005 C  1036.0080 93.3005 L  1036.0080 98.9692 L  1036.0080 98.9692 L  1036.3301 99.6778  1036.5877 100.4508  1036.5877 101.2882 C  1036.5877 102.1900  1036.3301 102.8986  1036.0080 103.4783 C  1036.0080 103.4783 L  1036.0080 107.0857 L  1037.6184 107.1501 L  1036.1368 111.0151 L  1036.1368 111.1439 L  1036.1368 111.6593 L  1036.1368 111.6593 L  1036.1368 111.8525  1036.1368 112.3034  1036.0080 112.8832 C  1036.0080 112.8832 L  1036.0080 125.1868 L  1039.4221 125.1868 L  1039.4221 125.1868 L  1047.1521 125.1868  1051.2747 121.3862  1053.0140 115.5243 C  1053.0784 115.2022  1053.2072 114.8157  1053.2717 114.4292 C  1053.2717 114.4292 L  1053.6582 111.8525 L  1053.6582 111.6593 L  1053.6582 111.6593 L  1053.6582 111.4660  1053.5937 111.1439  1053.5937 110.8218 C  1053.5937 110.4353  1053.6582 109.7912  1053.9158 109.1470 C  1053.9158 108.8893  1053.9158 108.6317  1053.9158 108.3740 C  1053.9158 106.8924  1053.8514 105.5397  1053.6582 104.1869 C  1053.0140 103.4139  1052.6275 102.3188  1052.6275 100.9017 C  1052.6275 100.6440  1052.6275 100.3219  1052.6919 100.0643 C  1051.9833 98.1318  1051.0171 96.3925  1049.6643 95.0398 C  1049.6643 95.0398 LFUu  1207.5223 92.5001 m  1207.5223 92.3713 L  1207.5223 92.3713 L  1207.5223 91.9848  1207.4579 91.6627  1207.4579 91.3406 C  1207.4579 89.6658  1207.9732 88.5063  1208.7462 87.6044 C  1208.7462 87.6044 L  1210.1634 81.8069 L  1210.1634 81.6137 L  1210.1634 81.6137 L  1210.2922 80.8407  1210.4211 79.5523  1211.0008 78.3284 C  1211.0008 78.3284 L  1211.0008 78.2640 L  1192.3200 78.2640 L  1201.7892 116.1410 L  1202.9487 111.5030 L  1202.9487 111.5030 L  1202.8843 111.1809  1202.8199 110.7944  1202.8199 110.4079 C  1202.8199 108.9264  1203.2708 107.9601  1203.9794 107.3159 C  1203.9794 107.3159 L  1203.9794 107.1871 L  1203.9794 107.1871 L  1203.9150 106.9294  1203.9150 106.6074  1203.9150 106.2853 C  1203.9150 104.4172  1204.6880 102.5491  1205.1389 101.4540 C  1205.6542 100.0369  1205.8475 99.4571  1205.8475 99.1994 C  1205.8475 99.1994 L  1205.7187 95.8498 L  1206.7493 95.8498 L  1207.5223 92.5001 L  1207.5223 92.5001 LFUu  686.7566 137.7373 m  687.2075 136.0625  687.7229 134.3877  688.1738 132.7772 C  672.0696 140.5072  649.0728 142.8907  631.5515 135.8692 C  623.6282 132.3907  615.7694 129.1699  608.8124 123.3724 C  607.7173 123.6945  607.2664 125.6914  608.3615 126.6577 C  618.2172 136.6422  631.2294 140.1207  643.9195 143.7925 C  658.6709 148.2373  674.3886 143.7925  686.7566 137.7373 C  686.7566 137.7373 LFUu  1106.7536 137.9306 m  1091.1648 136.5134  1077.3796 130.9092  1065.0760 121.3111 C  1063.9165 121.8264  1063.4656 123.6945  1064.5607 124.6607 C  1075.5759 135.7404  1090.8427 139.1545  1105.2720 143.1483 C  1105.9806 141.4735  1106.3671 139.6054  1106.7536 137.9306 C  1106.7536 137.9306 LFUu  882.4546 114.6761 m  883.0988 113.3234 L  883.0988 113.3234 L  885.7399 113.3234  890.3134 112.2283  892.8257 114.2252 C  892.5036 117.0596  894.6938 119.0565  897.0128 119.9583 C  904.8716 121.0534  914.1476 120.7957  918.9789 113.1946 C  918.9789 113.1946 L  929.4788 113.3234 L  929.4788 113.3234 L  930.8316 115.1915  928.4481 120.1516  932.3131 119.5074 C  932.3131 119.5074 L  933.0861 119.5074 L  933.0861 119.5074 L  934.1168 117.6393  931.2181 113.1946  934.6966 113.1946 C  934.6966 113.1946 L  934.6966 110.1026 L  934.6966 110.1026 L  931.4757 110.3602  933.3438 106.1731  932.3131 104.3695 C  931.7978 102.3726  934.1168 103.8541  934.6966 103.2100 C  937.5309 97.7345  929.3500 102.3081  932.1199 97.2192 C  933.2150 95.8665  931.3469 92.0015  934.5677 92.7745 C  934.7610 92.2591  934.6966 91.3573  934.6966 90.3910 C  933.6659 90.1334  932.3131 90.1334  931.8622 88.9095 C  931.3469 86.8481  932.6996 85.1733  931.7978 83.4985 C  932.6996 82.4034  935.9849 83.1764  934.6966 80.2132 C  930.8316 81.6304  930.7027 76.5414  927.6107 75.7684 C  925.4850 74.6734  922.8439 74.1580  920.7181 72.8053 C  920.7181 72.8053 L  934.5677 72.8053 L  934.5677 72.8053 L  934.7610 72.0323  934.6966 71.0660  934.6966 70.1642 C  934.6966 70.1642 L  881.2307 70.4219 L  881.2307 70.4219 L  880.9086 71.0660  881.0374 72.0323  881.0374 72.8053 C  892.8257 73.5139  904.7428 72.6120  916.4666 72.8053 C  913.7611 73.9004  914.5341 77.1212  914.3409 79.4402 C  907.0618 79.2469  900.1048 81.1150  893.2766 79.4402 C  889.7981 80.9862  885.2889 79.4402  881.2307 80.0199 C  881.2307 80.0199 L  881.0374 83.1764 L  915.2427 83.1764 L  924.1322 90.0045 L  881.2307 90.1334 L  881.2307 90.1334 L  880.9086 90.9064  881.0374 92.0015  881.0374 93.2254 C  896.2398 92.5812  911.7642 94.1272  926.7089 92.5812 C  928.8346 94.2560  927.6107 97.6057  927.6107 99.8603 C  912.7949 99.9891  897.5281 99.9891  883.0988 100.5045 C  883.0988 100.5045 L  881.2307 99.8603 L  880.9086 126.7865 L  880.0068 126.7865 L  880.0068 126.7865 L  879.9424 127.6883  881.4239 126.7865  881.9393 126.7865 C  884.1939 122.9215  881.4239 118.9276  882.4546 114.6761 C  882.4546 114.6761 LFUu  778.6793 124.9184 m  778.5504 125.8202  777.5842 126.4644  776.6824 126.6577 C  775.7805 125.3693  775.2652 124.1454  775.2652 122.4706 C  774.2989 119.5718  776.8112 115.3203  773.7192 113.3234 C  761.0291 113.3234  748.3390 114.0964  735.6489 114.4185 C  735.6489 115.1915  735.3912 116.0933  735.8422 116.7375 C  735.3268 117.4461  734.2962 117.6393  733.5232 117.9614 C  732.8790 117.1884  732.3637 116.6731  732.4281 115.6424 C  732.1060 111.9706  728.3698 114.8050  726.6950 113.8387 C  726.6950 113.8387 L  728.2410 111.3265 L  728.2410 111.3265 L  729.2716 111.0044  729.9158 111.5841  731.0109 111.4553 C  732.3637 111.4553  731.9772 110.1026  732.1060 109.2007 C  730.4956 104.2406  733.5232 101.0842  735.3268 97.0904 C  733.5232 106.8173  744.2163 97.9922  748.7255 101.3419 C  748.7255 101.3419 L  774.2989 100.9554 L  774.8143 98.6364 L  774.8143 98.6364 L  773.5259 96.7683  770.8204 98.1210  768.9523 97.6057 C  762.3174 90.3910  751.1089 96.3174  742.9924 94.2560 C  742.9924 94.2560 L  741.1243 94.9002 L  741.1243 94.9002 L  739.5139 93.7407  737.1949 94.1272  735.3268 93.8695 C  735.3268 93.8695 L  728.7563 80.4064 L  728.7563 80.4064 L  731.4618 81.1150  734.2962 81.8880  737.1949 81.5015 C  757.2929 80.0199  778.5504 81.8880  798.5840 80.0199 C  798.6485 77.6365  798.1331 75.7684  798.0043 73.5139 C  798.0043 73.5139 L  736.8728 73.9004 L  736.8728 73.9004 L  733.3943 76.1549  729.5293 73.7715  725.7287 74.2869 C  725.7287 74.2869 L  723.0232 69.0691 L  723.0232 69.0691 L  721.9281 67.2010  723.9251 64.9464  722.0570 63.5293 C  722.0570 63.5293 L  722.3791 41.1122 L  722.3791 41.1122 L  722.3791 39.6951  722.8300 37.6982  724.3760 38.1491 C  726.8882 44.2043  724.8913 51.9343  725.9220 58.3115 C  725.9220 62.3054  730.5600 59.6643  732.6213 60.5661 C  737.8391 62.3054  735.3912 68.2961  738.6121 71.0660 C  757.6150 70.8084  778.0351 70.6151  797.4890 71.3881 C  797.4890 71.3881 L  801.0963 69.5200 L  801.0963 69.5200 L  805.6055 71.6458  811.9827 70.4219  817.0716 71.0660 C  817.0716 71.0660 L  815.3324 73.7715 L  815.3324 73.7715 L  810.9520 74.9310  800.9675 70.6151  802.3846 78.3451 C  803.2220 82.9831  809.0840 79.1181  812.2404 80.9862 C  811.4674 85.6242  805.7343 82.8543  802.5135 84.2715 C  802.5135 84.2715 L  803.3509 91.0352 L  806.7005 91.4861 L  806.7005 91.4861 L  806.1852 92.9033  805.2834 94.1272  803.7374 94.2560 C  804.3171 96.5750  803.7374 99.0873  804.3171 101.3419 C  804.3171 101.3419 L  806.5073 101.3419 L  806.5073 101.3419 L  808.5042 100.4400  808.9551 102.9523  809.1484 103.8541 C  809.1484 103.8541 L  803.7374 104.2406 L  803.7374 104.2406 L  803.8662 106.4952  803.4797 108.6854  804.1883 110.9400 C  804.1883 110.9400 L  811.4674 110.5535 L  811.4674 110.5535 L  813.4643 110.3602  813.4643 112.8081  814.1085 113.7743 C  802.3846 113.3234  789.6301 112.5504  778.5504 114.4185 C  779.0014 117.7037  779.6455 121.5687  778.6793 124.9184 C  778.6793 124.9184 LFUu  1234.8785 123.1792 m  1234.7496 124.1454  1233.8478 124.6607  1232.8816 124.6607 C  1231.9797 123.4368  1231.4644 122.2773  1231.2067 120.5381 C  1230.5626 117.6393  1233.0104 113.3234  1229.9828 111.3265 C  1229.9828 111.3265 L  1206.1486 111.5841 L  1206.1486 111.3265 L  1206.1486 111.3265 L  1205.1824 108.0412  1209.0474 110.0381  1210.1425 108.9431 C  1203.8940 108.0412  1209.1762 102.3081  1209.0474 99.0873 C  1216.2620 99.0873  1223.4767 99.2161  1230.5626 98.9585 C  1230.5626 98.9585 L  1231.0135 96.6395 L  1231.0135 96.6395 L  1229.5963 94.9002  1227.0196 96.3174  1225.1516 95.6732 C  1221.6086 91.0352  1215.7467 92.0015  1210.7222 92.0015 C  1210.1425 86.8481  1216.4553 90.0045  1219.0964 88.2653 C  1219.0964 88.2653 L  1218.7743 85.8819 L  1218.7743 85.8819 L  1219.2252 84.4003  1220.9645 83.3052  1222.1884 82.8543 C  1227.1485 82.4034  1231.0135 85.6242  1233.9766 89.2315 C  1241.0625 88.5874  1248.7925 89.8757  1255.4274 88.1365 C  1254.8477 85.7530  1255.8139 82.9831  1253.9458 81.1150 C  1240.6116 82.8543  1226.3755 80.8574  1213.3633 82.0169 C  1213.4921 80.9862  1213.6854 79.8911  1214.2651 78.9893 C  1227.7282 78.5384  1241.8355 79.6334  1254.5256 78.0230 C  1254.8477 75.7684  1254.3967 73.7715  1254.2035 71.5169 C  1254.2035 71.5169 L  1193.5229 72.0323 L  1191.2684 72.6120 L  1136.9006 72.0323 L  1136.9006 72.0323 L  1134.6461 72.9341  1134.6461 70.1642  1134.4528 69.2624 C  1134.4528 69.2624 L  1178.8359 68.9403 L  1179.6734 68.2961 L  1179.6734 68.2961 L  1177.8053 66.2992  1180.4464 63.3360  1178.2562 61.5323 C  1178.2562 61.5323 L  1178.5783 39.1153 L  1178.5783 39.1153 L  1178.5783 37.8270  1179.1580 35.8301  1180.5752 36.1522 C  1183.0874 42.0141  1181.0905 50.0662  1182.1212 56.5723 C  1182.1212 60.1152  1186.8236 57.6673  1188.8205 58.6980 C  1194.2959 60.1152  1191.2684 66.7501  1194.9401 69.2624 C  1214.4584 68.7470  1234.7496 68.7470  1254.2035 69.2624 C  1254.2035 69.2624 L  1256.2004 67.7808 L  1256.2004 67.7808 L  1257.1667 67.5231  1258.7127 67.5231  1259.0348 68.7470 C  1262.8998 69.2624  1267.3445 68.2961  1270.8874 69.2624 C  1270.8874 69.2624 L  1269.6635 71.6458 L  1269.6635 71.6458 L  1266.2494 71.9034  1262.5133 71.3881  1259.4213 72.2899 C  1259.4213 72.2899 L  1258.6482 77.2500 L  1258.6482 77.2500 L  1260.5163 80.0199  1264.4458 77.6365  1267.5378 78.6672 C  1268.1175 83.8850  1261.5470 80.8574  1258.7127 82.2745 C  1258.7127 82.2745 L  1259.6145 89.0383 L  1263.9304 89.2315 L  1263.9304 89.8757 L  1263.9304 89.8757 L  1263.9304 92.4524  1261.4826 91.3573  1259.9366 92.2591 C  1260.5163 94.4493  1259.6789 97.4769  1260.5808 99.4094 C  1260.5808 99.4094 L  1256.3937 111.3265 L  1256.3937 111.3265 L  1249.0502 111.3265  1241.3846 111.0044  1234.5564 112.4216 C  1235.2006 115.7712  1235.8447 119.5718  1234.8785 123.1792 C  1234.8785 123.1792 LFUu  637.2846 114.4185 m  636.9625 122.4061 L  636.9625 122.4061 L  629.6834 120.9246  621.1804 121.9552  613.5792 121.0534 C  609.7142 121.3111  607.8461 117.9614  607.8461 114.4185 C  607.8461 114.4185 L  583.5610 114.4185 L  583.5610 111.9706 L  607.9105 111.5841 L  607.9105 111.5841 L  609.1345 109.2007  607.8461 106.8173  607.2664 104.3695 C  607.2664 104.3695 L  583.5610 104.9492 L  583.5610 102.3081 L  583.5610 102.3081 L  591.5487 101.5995  600.1161 102.3726  607.8461 101.4707 C  607.7173 99.0873  608.1682 96.5750  607.2664 94.4493 C  607.2664 94.4493 L  583.5610 94.7714 L  583.5610 92.0015 L  598.2480 92.0015 L  598.8922 91.4861 L  598.8922 91.4861 L  597.0241 89.4892  596.1223 87.0414  595.9290 84.4003 C  595.9290 84.4003 L  583.5610 84.8512 L  583.5610 81.6304 L  583.5610 81.6304 L  591.0334 81.6304  598.4413 81.8880  605.5271 82.4034 C  602.6284 79.4402  599.2787 76.7991  595.9290 74.2869 C  592.2573 75.3819  587.6837 74.6734  583.5610 74.8022 C  583.5610 74.8022 L  583.5610 72.0323 L  583.5610 72.0323 L  587.8125 72.0323  591.8064 72.0323  595.8002 71.0660 C  595.8002 71.0660 L  595.4137 68.9403 L  595.4137 68.9403 L  597.6683 61.0170  595.5425 51.4189  597.0241 43.2380 C  597.0241 43.2380 L  598.2480 43.2380 L  598.2480 43.2380 L  601.0180 48.0693  599.2787 54.8330  600.3094 60.4373 C  600.7603 62.0477  598.7634 63.5293  600.3094 64.8820 C  605.1406 65.3974  610.3584 67.5231  612.4841 72.2899 C  631.7447 70.9372  651.0698 72.6120  670.5236 72.4832 C  670.5236 72.9341  670.6524 73.5139  670.2659 73.9004 C  651.0698 73.7715  632.0024 74.2869  612.6774 74.4801 C  612.9995 76.7991  612.9995 79.8911  610.3584 81.5015 C  616.4136 82.0169  622.7264 81.5015  628.9104 82.0169 C  631.6803 80.9862  627.6865 78.1519  630.9717 77.1212 C  636.0607 73.5139  640.1833 79.4402  644.2416 82.0169 C  644.2416 82.0169 L  652.4225 81.5015 L  652.4225 81.5015 L  658.4133 82.2745  664.4040 82.5322  670.5236 81.6304 C  670.5236 83.1764  670.9745 85.1733  668.8488 84.7224 C  672.0696 93.4830  670.0083 104.3695  670.5236 114.4185 C  670.5236 114.4185 L  637.2846 114.4185 L  637.2846 114.4185 LFUu  1108.8150 120.1516 m  1095.3519 121.5043  1083.1127 118.6056  1069.7784 119.0565 C  1065.9134 119.1853  1064.0453 115.8356  1064.0453 112.4216 C  1061.5975 112.4216  1058.9564 112.5504  1056.8307 112.2283 C  1056.9595 111.3265  1056.3798 110.1026  1057.4104 109.9093 C  1057.4104 109.9093 L  1064.1098 109.9093 L  1064.1098 109.9093 L  1065.3337 107.1394  1064.0453 104.8204  1063.4656 102.3726 C  1060.8245 101.3419  1055.0914 105.2069  1055.8644 99.9891 C  1058.6988 99.8603  1061.5975 100.4400  1064.0453 99.4094 C  1063.9165 97.2192  1064.4318 94.4493  1063.4656 92.4524 C  1063.4656 92.4524 L  1051.9994 92.7745 L  1047.8123 90.0045 L  1047.8123 90.0045 L  1050.1957 89.8757  1053.0945 90.3910  1055.0914 89.4892 C  1053.2233 87.4923  1052.3215 85.1733  1052.1927 82.4034 C  1044.7203 82.4034  1037.7633 83.3052  1030.5486 82.5322 C  1030.5486 82.5322 L  1029.9045 87.1702 L  1029.9045 87.1702 L  1029.3891 89.4892  1031.1284 90.8420  1032.9965 90.3910 C  1033.8983 92.9033  1031.3861 92.4524  1030.2266 93.2254 C  1029.7756 94.9002  1030.2266 97.2192  1029.7756 99.0873 C  1029.9045 100.8265  1032.0302 99.4094  1032.9965 100.1824 C  1034.4136 103.2744  1030.2266 102.3081  1029.9045 103.7253 C  1030.8707 105.5934  1029.2603 107.7191  1029.7756 109.9093 C  1029.7756 109.9093 L  1032.9965 110.1026 L  1032.9965 110.1026 L  1032.6744 110.9400  1033.1253 111.9062  1032.6744 112.4216 C  1031.7726 112.4216  1030.5486 111.9706  1030.2266 113.1946 C  1030.2266 113.1946 L  986.1011 112.8081 L  983.2024 113.8387 L  983.2024 113.8387 L  981.6564 113.4522  982.3649 110.9400  982.3649 109.9093 C  997.4385 109.9093  1012.3187 109.9093  1026.8125 108.9431 C  1026.6192 106.8173  1028.4873 103.8541  1026.3616 102.5014 C  1018.7604 103.2744  1010.5795 103.2100  1002.9783 102.8235 C  1002.2053 102.9523  1001.3035 104.9492  1000.6593 103.2744 C  1000.6593 103.2744 L  983.0091 103.2744 L  983.0091 103.2744 L  981.7852 102.9523  982.2361 100.8265  982.3649 99.8603 C  997.4385 99.4094  1012.3187 99.4094  1027.2634 98.9585 C  1027.2634 98.9585 L  1026.3616 92.5812 L  982.2361 92.7745 L  982.3649 89.8757 L  1026.6192 89.4892 L  1026.6192 89.4892 L  1026.6192 87.1702  1026.8125 84.9800  1026.4904 82.8543 C  1026.4904 82.8543 L  982.2361 82.5322 L  982.3649 79.4402 L  1026.3616 79.1181 L  1026.3616 79.1181 L  1026.4904 77.6365  1025.9106 76.5414  1025.7174 74.9310 C  1025.1376 73.9004  1026.8125 72.8053  1025.5241 72.2899 C  1024.4935 71.9034  1023.6561 72.8053  1022.7542 72.8053 C  1009.4200 72.0323  995.4415 72.6120  982.2361 72.4832 C  982.3649 71.5169  982.1073 70.4219  982.3649 69.5200 C  982.3649 69.5200 L  1029.0026 69.2624 L  1029.0026 69.2624 L  1029.9045 70.6151  1031.7726 69.6489  1032.9965 70.1642 C  1032.9965 70.1642 L  1032.9965 72.2899 L  1029.9045 72.6120 L  1029.9045 72.6120 L  1030.2266 74.9310  1029.7756 77.6365  1030.2266 79.8911 C  1040.7265 80.0199  1051.9994 79.2469  1061.7908 80.4064 C  1061.7908 80.4064 L  1052.9657 72.2899 L  1052.9657 72.2899 L  1047.3614 73.3850  1041.0486 72.8053  1035.3799 72.6120 C  1033.6406 72.2899  1035.5087 70.9372  1035.5087 70.0354 C  1041.0486 70.0354  1046.7817 70.0354  1051.9994 69.0691 C  1051.9994 69.0691 L  1051.3552 66.8789 L  1051.3552 66.8789 L  1053.8675 59.0201  1051.7417 49.2932  1053.2233 41.1122 C  1053.2233 41.1122 L  1054.4472 41.1122 L  1054.4472 41.1122 L  1057.2816 45.8791  1055.4779 52.8361  1056.5086 58.3115 C  1056.9595 60.0508  1054.9626 61.5323  1056.5086 62.8851 C  1061.3398 63.5293  1066.5576 65.3974  1068.6833 70.1642 C  1068.6833 70.1642 L  1089.1679 70.0354 L  1088.3949 72.0323 L  1068.9410 72.4832 L  1068.9410 72.4832 L  1069.1987 74.8022  1069.1987 78.0230  1066.5576 79.4402 C  1072.5483 80.0199  1078.7968 79.4402  1084.5299 80.0199 C  1086.7844 82.4034  1091.6157 83.8850  1093.1617 86.1395 C  1090.2629 86.2684  1088.3949 83.4985  1085.8826 82.2745 C  1085.8826 82.2745 L  1064.4318 82.4034 L  1064.4318 82.4034 L  1067.3306 84.1426  1065.9778 88.0076  1067.9748 90.1334 C  1077.2508 88.7162  1086.2691 91.0352  1095.0298 90.0045 C  1095.0298 90.0045 L  1095.8028 88.1365 L  1095.8028 88.1365 L  1100.7629 90.9064  1099.3457 95.3511  1099.8610 99.9891 C  1099.8610 99.9891 L  1102.8886 99.9891 L  1102.8886 99.9891 L  1104.9500 99.0873  1105.0788 101.3419  1105.4009 102.3726 C  1105.4009 102.3726 L  1099.8610 102.5014 L  1099.8610 102.5014 L  1099.8610 104.8204  1098.8948 107.7191  1099.8610 110.1026 C  1099.8610 110.1026 L  1107.7199 109.9093 L  1107.7199 109.9093 L  1108.6217 112.8725  1108.9438 116.6731  1108.8150 120.1516 C  1108.8150 120.1516 LFUu  1151.6521 112.5504 m  1163.5692 111.3265  1175.9372 113.3234  1187.6610 111.5841 C  1189.2070 112.8081  1188.5629 117.7037  1191.5904 115.3203 C  1192.0414 114.8050  1191.5904 113.3234  1191.9125 112.4216 C  1191.9125 112.4216 L  1197.3235 111.9706 L  1197.3235 111.9706 L  1196.8082 110.9400  1197.7744 108.9431  1195.7775 109.0075 C  1194.4892 109.0075  1192.1702 110.3602  1192.0414 108.0412 C  1192.0414 108.0412 L  1192.4279 101.9860 L  1194.5536 101.9860 L  1194.5536 101.9860 L  1194.9401 100.8265  1194.2959 98.6364  1192.4279 99.4094 C  1190.6886 99.4094  1192.0414 97.4769  1191.2684 96.5750 C  1192.0414 94.9002  1190.6886 92.4524  1192.4279 92.0015 C  1191.2684 88.0076  1190.6242 83.7561  1189.5291 79.4402 C  1185.3420 77.6365  1180.5752 78.3451  1176.2593 78.9893 C  1176.2593 78.9893 L  1152.4251 79.2469 L  1152.4251 79.2469 L  1148.8822 75.7684  1143.6000 72.8053  1138.3178 74.6734 C  1136.5141 76.7991  1137.9313 79.8911  1138.6399 82.2745 C  1141.7319 83.4985  1144.0509 86.8481  1147.9159 86.1395 C  1149.2687 86.7193  1148.5601 88.0076  1148.7533 88.9095 C  1146.4987 89.6180  1143.7932 89.0383  1141.1522 89.2315 C  1140.1859 93.7407  1145.2748 92.5812  1147.7871 92.4524 C  1148.3668 94.2560  1148.8822 97.2192  1147.9159 99.4094 C  1147.9159 99.4094 L  1144.3730 99.8603 L  1144.3730 99.8603 L  1145.0172 100.5045  1144.5018 102.3081  1145.7902 102.3726 C  1146.8852 102.8235  1147.6582 101.4707  1148.3668 102.5014 C  1147.7871 104.9492  1149.5263 108.1056  1147.6582 110.0381 C  1147.6582 110.0381 L  1150.5570 118.6056 L  1150.5570 118.6056 L  1151.9742 117.1884  1151.6521 114.8050  1151.6521 112.5504 C  1151.6521 112.5504 LFUu  997.5673 66.1704 m  992.6072 66.2992  986.6164 66.8789  982.2361 65.7839 C  982.2361 65.7839 L  982.3649 51.4189 L  984.5551 52.5140 L  984.5551 52.5140 L  987.3250 53.4803  988.7422 56.5723  987.9692 59.2133 C  989.9661 63.3360  995.6992 59.4710  998.4691 62.5630 C  999.3065 63.7869  998.9200 65.3974  997.5673 66.1704 C  997.5673 66.1704 LFUu  823.1912 48.3269 m  822.9336 48.1981  822.5471 47.6828  822.2894 47.6828 C  820.9366 47.5539  821.5164 48.7134  821.3231 49.5508 C  821.3231 49.5508 L  821.9673 61.1458 L  821.9673 61.1458 L  825.1881 57.6673  824.6084 52.5784  823.1912 48.3269 C  823.1912 48.3269 LFUu  1086.7844 75.3819 m  1086.2691 75.7684  1085.6249 76.5414  1085.8826 77.1212 C  1086.5268 76.7991  1086.5268 75.8973  1086.7844 75.3819 C  1086.7844 75.3819 LFUu  910.3941 113.9798 m  906.9800 115.3970  902.5352 115.3970  898.6058 115.3970 C  897.5107 115.2682  896.2868 114.8817  896.1580 113.9798 C  896.1580 113.9798 L  910.3941 113.9798 L  910.3941 113.9798 LFUu  667.1398 107.3217 m  667.1398 106.5487  667.1398 105.6469  667.2687 104.8739 C  667.2687 104.8739 L  643.9498 104.6807 L  643.9498 104.6807 L  643.9498 105.5181  643.8210 106.2911  643.6921 107.1929 C  643.5633 108.8677  643.3056 110.7358  643.9498 112.2818 C  651.5510 110.4138  659.4098 113.2481  667.0110 111.5088 C  667.3975 110.0917  667.2687 108.6101  667.1398 107.3217 C  667.1398 107.3217 LFUu  748.0040 106.8632 m  736.4090 106.8632 L  736.4090 106.8632 L  736.0869 108.4737  735.8292 110.0841  736.7311 111.4368 C  742.3997 110.2129  748.1328 111.6301  753.5438 110.9859 C  751.8690 110.3418  750.0009 108.6669  748.0040 106.8632 C  748.0040 106.8632 LFUu  736.4090 106.8670 m  748.0040 106.8670 L  748.0040 106.8670 L  747.2310 106.0940  746.2647 105.2566  745.4273 104.4192 C  745.4273 104.4192 L  736.4090 104.4192 L  736.4090 104.4192 L  736.5378 105.2566  736.4090 106.0940  736.4090 106.8670 C  736.4090 106.8670 LFUu  774.1779 106.7192 m  770.7638 106.7192 L  770.7638 106.7192 L  770.7638 107.5567  770.5062 108.3297  770.0552 108.9738 C  769.2822 109.2959  768.7669 110.0689  768.0583 110.5843 C  769.9908 110.8419772.0522 111.4217  774.3712 111.1640 C  774.3712 111.1640 L  774.1779 106.7192 L  774.1779 106.7192 LFUu  770.7638 106.7950 m  774.1779 106.7950 L  774.1779 104.3472 L  770.0552 104.3472 L  770.0552 104.3472 L  770.6350 104.9269  770.8927 105.8287  770.7638 106.7950 C  770.7638 106.7950 LFUu  799.4494 106.6548 m  778.8361 106.6548 L  778.8361 106.6548 L  778.6428 108.2008  778.6428 109.8112  779.7379 111.1640 C  785.9863 109.6180  792.9433 111.0352  799.3850 111.0352 C  800.2868 109.4892  799.8359 108.0720  799.4494 106.6548 C  799.4494 106.6548 LFUu  778.8361 106.6662 m  799.4494 106.6662 L  799.4494 106.6662 L  799.3850 105.8287  799.1917 105.1846  799.1917 104.3472 C  799.1917 104.3472 L  778.8361 104.3472 L  778.8361 104.3472 L  778.9649 105.1846  778.8361 106.0220  778.8361 106.6662 C  778.8361 106.6662 LFUu  928.5748 105.6392 m  928.7037 106.9920  928.4460 108.7312  928.4460 110.0840 C  928.4460 110.0840 L  919.1700 109.9552 L  918.9767 107.7650 L  918.9767 107.7650 L  918.7191 106.7343  918.3970 106.0902  918.0749 105.6392 C  918.0749 105.6392 L  928.5748 105.6392 L  928.5748 105.6392 LFUu  881.6795 105.6392 m  916.4001 105.6392 L  916.4001 105.6392 L  915.3050 106.4767  914.0811 108.8601  914.0811 110.2128 C  903.7100 110.2128  892.4371 109.3110  882.1948 110.2128 C  882.1948 108.7312  881.5506 107.1208  881.6795 105.6392 C  881.6795 105.6392 LFUu  918.0749 105.6430 m  917.6240 105.0632  916.9798 105.1921  916.4001 105.6430 C  916.4001 105.6430 L  881.6795 105.6430 L  881.6795 105.6430 L  881.6795 104.9988  881.9371 104.2902  882.3236 103.7749 C  882.3236 103.7749 L  926.5779 103.1952 L  926.5779 103.1952 L  927.8663 103.4528  928.4460 104.4191  928.5748 105.6430 C  928.5748 105.6430 L  918.0749 105.6430 L  918.0749 105.6430 LFUu  1095.9300 105.5672 m  1068.4241 105.5672 L  1068.4241 105.5672 L  1068.1020 107.4353  1067.7799 109.2390  1069.1971 110.2697 C  1078.0221 110.1408  1086.7828 109.6899  1095.6079 110.0120 C  1096.3809 108.4660  1096.1232 107.0488  1095.9300 105.5672 C  1095.9300 105.5672 LFUu  1068.4241 105.5710 m  1095.9300 105.5710 L  1095.9300 105.5710 L  1095.6079 104.6047  1095.4791 103.7029  1095.4791 102.9299 C  1095.4791 102.9299 L  1068.4241 102.9299 L  1068.4241 102.9299 L  1068.5529 103.7029  1068.5529 104.6047  1068.4241 105.5710 C  1068.4241 105.5710 LFUu  1188.0442 104.7828 m  1188.1731 106.3288  1188.0442 107.9392  1187.6577 109.2920 C  1175.8051 108.5834  1164.0812 109.9362  1152.2286 109.1632 C  1152.0997 107.5527  1152.2930 106.2000  1152.6151 104.7828 C  1152.6151 104.7828 L  1188.0442 104.7828 L  1188.0442 104.7828 LFUu  1152.6151 104.7942 m  1152.7439 104.1500  1152.7439 103.5702  1152.8727 102.9261 C  1152.8727 102.9261 L  1187.6577 102.3463 L  1187.6577 102.3463 L  1187.9154 103.0549  1188.0442 103.9567  1188.0442 104.7942 C  1188.0442 104.7942 L  1152.6151 104.7942 L  1152.6151 104.7942 LFUu  1230.3472 104.7752 m  1226.9331 104.7752 L  1226.9331 104.7752 L  1226.9331 105.6127  1226.7398 106.3857  1226.2889 106.9010 C  1225.5159 107.3519  1225.0006 108.1249  1224.2920 108.7691 C  1226.1601 108.7691  1228.2858 109.3488  1230.6048 109.2200 C  1230.6048 109.2200 L  1230.3472 104.7752 L  1230.3472 104.7752 LFUu  1226.9331 104.7942 m  1230.3472 104.7942 L  1230.1539 102.3463 L  1226.2889 102.3463 L  1226.2889 102.3463 L  1226.8686 102.9261  1227.1263 103.8279  1226.9331 104.7942 C  1226.9331 104.7942 LFUu  1255.6262 104.7752 m  1235.0129 104.7752 L  1235.0129 104.7752 L  1234.8841 106.3857  1234.8841 107.8672  1235.7859 109.2200 C  1242.1631 107.6740  1249.1202 109.0912  1255.4974 109.0912 C  1256.3992 107.5452  1256.0772 106.2568  1255.6262 104.7752 C  1255.6262 104.7752 LFUu  1235.0129 104.7790 m  1255.6262 104.7790 L  1255.6262 104.7790 L  1255.4974 104.0060  1255.4330 103.1686  1255.4330 102.3312 C  1255.4330 102.3312 L  1235.0129 102.3312 L  1235.0129 102.3312 L  1235.1417 103.1686  1235.0129 104.0060  1235.0129 104.7790 C  1235.0129 104.7790 LFUu  765.6627 104.8662 m  754.3898 104.9950 L  754.3898 104.9950 L  757.8039 106.5410  763.0861 107.5072  765.6627 104.8662 C  765.6627 104.8662 LFUu  1221.9040 103.0510 m  1219.0697 105.5632  1213.9807 104.5970  1210.6311 103.0510 C  1210.6311 103.0510 L  1221.9040 103.0510 L  1221.9040 103.0510 LFUu  611.8001 97.3820 m  611.4780 99.0568  611.1559 100.7961  612.2510 102.1488 C  621.6558 103.0507  630.1588 100.2807  639.3060 101.6979 C  639.3060 101.6979 L  639.1128 97.3820 L  639.1128 94.8697 L  612.0577 95.0630 L  612.0577 95.0630 L  612.0577 95.8360  611.9289 96.6090  611.8001 97.3820 C  611.8001 97.3820 LFUu  643.6505 96.6468 m  643.6505 101.6713 L  667.2270 101.6713 L  667.2270 101.6713 L  666.9693 100.3830  667.3558 98.3217  667.2270 96.6468 C  667.0982 95.5517  666.7761 94.5855  666.0031 93.9413 C  658.7240 94.9076  651.5093 95.0364  643.6505 94.7787 C  643.6505 94.7787 L  643.6505 96.6468 L  643.6505 96.6468 LFUu  799.4532 96.5028 m  777.9380 96.5028 L  777.9380 96.5028 L  777.8091 97.9200  778.3889 99.4660  778.7110 100.5611 C  781.6097 102.0427  784.2508 100.0458  786.8919 100.5611 C  790.8857 101.1408  795.0084 99.6592  798.8090 101.1408 C  799.5820 99.7881  799.5820 98.0488  799.4532 96.5028 C  799.4532 96.5028 LFUu  777.9380 96.5142 m  799.4532 96.5142 L  799.4532 96.5142 L  799.2599 95.5479  799.1311 94.7749  799.1311 94.0019 C  799.1311 94.0019 L  778.6466 94.4528 L  778.6466 94.4528 L  778.2601 95.0970  777.9380 95.8700  777.9380 96.5142 C  777.9380 96.5142 LFUu  1095.4980 95.4948 m  1067.9921 95.4948 L  1067.9921 95.4948 L  1067.8632 97.0408  1067.4767 98.7801  1068.5718 100.1328 C  1077.9766 101.0347  1086.5441 98.2647  1095.5624 100.0040 C  1095.5624 100.0040 L  1095.4980 95.4948 L  1095.4980 95.4948 LFUu  1067.9921 95.4569 m  1095.4980 95.4569 L  1095.4980 92.9447 L  1068.1209 93.3312 L  1068.1209 93.3312 L  1068.2497 94.0397  1068.1209 94.6839  1067.9921 95.4569 C  1067.9921 95.4569 LFUu  1187.3281 94.6308 m  1187.4569 99.2688 L  1152.5431 99.2688 L  1152.5431 94.6308 L  1187.3281 94.6308 L  1187.3281 94.6308 LFUu  1187.3281 94.5702 m  1152.5431 94.5702 L  1152.5431 92.5088 L  1152.5431 92.5088 L  1164.0092 94.1192  1175.6042 91.8647  1187.3281 92.0579 C  1187.3281 92.0579 L  1187.3281 94.5702 L  1187.3281 94.5702 LFUu  1255.6300 94.6232 m  1233.9860 94.6232 L  1233.9860 94.6232 L  1233.9860 96.1048  1234.5657 97.5220  1234.9522 98.7459 C  1237.7221 100.0987  1240.4276 98.1018  1243.0687 98.7459 C  1246.8049 99.1968  1251.1852 97.7152  1254.9214 99.1968 C  1255.7588 97.8441  1255.7588 96.2337  1255.6300 94.6232 C  1255.6300 94.6232 LFUu  1233.9860 94.6270 m  1255.6300 94.6270 L  1255.6300 94.6270 L  1255.5012 93.6607  1255.3079 92.8877  1255.3079 92.0503 C  1255.3079 92.0503 L  1234.5657 92.4368 L  1234.5657 92.4368 L  1234.1148 93.0810  1233.9860 93.8540  1233.9860 94.6270 C  1233.9860 94.6270 LFUu  633.5652 87.2186 m  628.8628 81.7432  621.7770 86.6388  615.8507 84.7063 C  613.1451 84.8352  611.0838 84.1910  608.3783 84.4487 C  609.4090 85.0928  609.9887 86.0591  610.1820 86.9609 C  610.9550 88.5069  610.9550 90.6327  612.1145 92.0498 C  621.0040 90.6327  630.0867 92.9517  638.9118 91.7278 C  641.2953 87.2186  634.9180 89.7308  633.5652 87.2186 C  633.5652 87.2186 LFUu  655.8249 86.9609 m  655.5028 86.1879  655.5028 85.4149  655.8249 84.4487 C  655.8249 84.4487 L  643.4569 84.8352 L  643.4569 84.8352 L  643.0060 85.5437  642.7483 86.3167  642.5551 87.0897 C  642.3618 88.7646  642.5551 90.7615  643.4569 92.0498 C  643.4569 92.0498 L  658.7237 91.7278 L  658.7237 91.7278 L  657.6930 90.1818  656.1470 88.6357  655.8249 86.9609 C  655.8249 86.9609 LFUu  763.7952 86.1386 m  764.1817 85.7521  764.8902 85.1079  765.4700 84.8502 C  767.7890 84.5926  770.1080 85.0435  772.1049 86.1386 C  774.2951 87.2981  776.4852 88.9729  778.0312 91.1631 C  778.0312 91.1631 L  799.0311 90.5189 L  799.0311 90.5189 L  799.0311 89.1018  799.0311 87.4913  798.8378 86.0742 C  798.5802 85.1079  798.3225 84.2061  797.8072 83.3687 C  776.6141 84.3349  756.1940 84.3349  734.8076 84.3349 C  734.8076 84.3349 L  734.8720 86.1386 L  735.4518 91.1631 L  762.6357 90.5189 L  762.6357 90.5189 L  761.9271 88.7797  762.6357 87.2981  763.7952 86.1386 C  763.7952 86.1386 LFUu  1178.2830 84.9108 m  1178.9272 86.4568  1179.7002 88.0673  1181.2462 89.0979 C  1171.1972 89.5488  1162.1788 89.5488  1152.3231 89.0979 C  1152.5807 87.6807  1152.1298 86.1992  1152.3231 84.9108 C  1152.3231 84.9108 L  1178.2830 84.9108 L  1178.2830 84.9108 LFUu  1178.2830 84.9222 m  1152.3231 84.9222 L  1152.3231 84.9222 L  1152.4519 84.0847  1152.5807 83.3117  1153.2249 82.6032 C  1153.2249 82.6032 L  1177.5100 82.4743 L  1177.5100 82.4743 L  1177.7032 83.3117  1178.0253 84.0847  1178.2830 84.9222 C  1178.2830 84.9222 LFUu  927.7274 83.4670 m  927.7274 83.9823 L  927.7274 83.9823 L  926.7612 86.7523  924.6998 84.8842  923.2182 83.4670 C  923.2182 83.4670 L  927.7274 83.4670 L  927.7274 83.4670 LFUu  923.2182 83.4783 m  922.9606 83.2851  922.7029 83.0918  922.5741 82.9630 C  922.5741 82.9630 L  927.6630 82.5121 L  927.7274 83.4783 L  923.2182 83.4783 L  923.2182 83.4783 LFUu  920.7171 79.0598 m  921.6833 79.2531  922.5852 79.7040  923.4870 80.1549 C  921.9410 79.5752  919.8152 80.1549  918.8490 79.0598 C  918.8490 79.0598 L  920.7171 79.0598 L  920.7171 79.0598 LFUu  918.8490 79.0712 m  918.7846 78.9423  918.6557 78.9423  918.6557 78.7491 C  919.4287 78.7491  920.0729 78.9423  920.7171 79.0712 C  920.7171 79.0712 L  918.8490 79.0712 L  918.8490 79.0712 LFUu  608.8470 75.0998 m  604.1446 75.0998 L  604.1446 75.0998 L  605.1752 76.3882  607.1722 76.5170  608.9114 76.0017 C  609.0402 75.6152  608.9114 75.2931  608.8470 75.0998 C  608.8470 75.0998 LFUu  1065.0162 73.0838 m  1060.3782 73.0838 L  1060.3782 73.0838 L  1061.4089 74.3722  1063.4058 74.5010  1065.1451 73.9857 C  1065.2739 73.5992  1065.1451 73.2771  1065.0162 73.0838 C  1065.0162 73.0838 LFUu  604.0079 70.9807 m  600.4650 70.9807 L  600.4650 70.9807 L  601.4312 72.3978  603.6858 71.4960  605.1030 71.4960 C  604.7809 71.2383  604.3300 71.0451  604.0079 70.9807 C  604.0079 70.9807 LFUu  600.4650 70.8632 m  604.0079 70.8632 L  604.0079 70.8632 L  602.9128 70.4767  601.6889 70.4767  600.2717 70.4767 C  600.2717 70.5411  600.4006 70.7343  600.4650 70.8632 C  600.4650 70.8632 LFUu  1056.5130 68.7562 m  1057.6081 70.3667  1059.9271 69.3360  1061.2154 69.3360 C  1060.9577 69.0783  1060.5712 68.8207  1060.1847 68.7562 C  1058.9608 68.3053  1057.6081 68.3053  1056.4486 68.3053 C  1056.4486 68.4986  1056.5130 68.6274  1056.5130 68.7562 C  1056.5130 68.7562 LFUu  1189.2200 65.1449 m  1182.7783 65.1449 L  1182.7783 65.1449 L  1183.7446 66.3688  1185.6771 66.6909  1186.3856 68.1081 C  1187.8672 68.2369  1189.2200 67.6572  1190.1218 66.8842 C  1189.8642 66.3688  1189.5421 65.7247  1189.2200 65.1449 C  1189.2200 65.1449 LFUu  1189.2200 65.2207 m  1188.6402 64.5121  1187.8672 63.8679  1186.9010 63.6102 C  1186.9010 63.6102 L  1182.2630 63.9967 L  1182.2630 63.9967 L  1182.2630 64.5121  1182.5206 64.9630  1182.7783 65.2207 C  1182.7783 65.2207 L  1189.2200 65.2207 L  1189.2200 65.2207 LFU*U  0.000 0.561 0.522 0.361 k*u  726.5557 67.2176 m  726.4913 67.2176 L  726.4913 67.2176 L  726.2337 66.9599  725.9760 66.5090  725.9760 65.9937 C  725.9760 65.9937 L  730.8717 65.7360 L  730.8717 65.7360 L  731.6447 65.8648  732.4177 66.3802  732.8686 67.2176 C  732.8686 67.2176 L  732.8686 67.1532 L  732.8686 67.1532 L  733.3195 67.7329  733.5127 68.5059  733.8348 69.0213 C  732.8686 69.6654  731.5158 70.1163  730.0987 70.1163 C  729.4545 68.6992  727.4576 68.3771  726.5557 67.2176 C  726.5557 67.2176 LF*U  0.000 0.561 0.522 0.361 k*u  217.9837 68.1212 m  218.5635 70.2470  219.0788 72.3727  219.5297 74.5629 C  220.5604 80.2960  221.3334 86.2867  221.3334 92.4063 C  221.3334 142.3293  181.2662 180.9793  132.5672 180.9793 C  83.6749 180.9793  43.7365 142.3293  43.7365 92.4063 C  43.7365 86.2867  44.3807 80.2960  45.4758 74.5629 C  45.9267 72.3727  46.4420 70.2470  47.0218 68.1212 C  47.0218 68.1212 L  72.5952 68.1212 L  72.5952 68.1212 L  71.6934 70.2470  70.9848 72.3727  70.3406 74.5629 C  68.7946 80.2960  67.8284 86.2867  67.8284 92.4063 C  67.8284 127.6423  97.0091 158.8844  132.5672 158.8844 C  167.9964 158.8844  197.1771 127.6423  197.1771 92.4063 C  197.1771 86.2867  196.2753 80.2960  194.6005 74.5629 C  193.9563 72.3727  193.2477 70.2470  192.4103 68.1212 C  192.4103 68.1212 L  217.9837 68.1212 L  217.9837 68.1212 LBb0 (Gradient7) 43.7365 68.1212 90.0000 112.8581 1 0 0 1 0 0 Bg0.0334 112.8581 177.5634 -0.0526 43.7365 180.9793 BmF2 BB*U  0.000 0.561 0.522 0.361 k*u  265.4762 68.1349 m  265.9916 99.5059  284.0283 114.5794  304.8993 113.4199 C  304.8993 113.4199 L  314.7550 137.1252 L  303.0312 137.1252 L  303.0312 137.1252 L  283.7062 137.1252  271.5958 125.5302  264.5100 109.6193 C  264.5100 109.6193 L  264.0591 109.6193 L  264.0591 136.5455 L  241.7709 132.6160 L  241.7709 68.1349 L  265.4762 68.1349 L  265.4762 68.1349 LBb0 (Gradient8) 241.7709 68.1349 90.0000 68.9903 1 0 0 1 0 0 Bg0.0204 68.9903 72.9637 -0.0216 241.7709 137.1252 BmF2 BB*U  0.000 0.561 0.522 0.361 k*u  341.7786 68.1122 m  318.1376 68.1122 L  318.1376 68.1122 L  318.1376 68.4987  318.1376 68.8207  318.1376 69.2072 C  318.1376 105.9892  344.2908 136.6516  381.7169 136.6516 C  398.9162 136.6516  414.8271 130.4675  427.8393 119.1302 C  427.8393 119.1302 L  413.4744 102.7684 L  413.4744 102.7684 L  402.9744 110.7560  396.0818 114.3634  381.9102 114.3634 C  358.0760 114.3634  341.7141 92.9770  341.7141 70.0447 C  341.7141 69.4005  341.7141 68.7563  341.7786 68.1122 C  341.7786 68.1122 LBb0 (Gradient9) 318.1376 68.1122 90.0000 68.5394 1 0 0 1 0 0 Bg0.0203 68.5394 109.6814 -0.0325 318.1376 136.6516 BmF2 BB*U  0.000 0.561 0.522 0.361 k*u  557.7159 68.1251 m  557.7159 74.9532 L  557.7159 94.6647 L  557.7159 94.6647 L  557.7159 124.4253  534.0105 136.6000  508.6947 136.6000 C  493.7501 136.6000  478.7410 130.8669  472.5570 120.8824 C  472.5570 120.8824 L  471.1398 120.8824 L  471.1398 182.2715 L  447.4344 178.2777 L  447.4344 74.9532 L  447.4344 68.1251 L  471.1398 68.1251 L  471.1398 74.9532 L  471.1398 77.3367 L  471.1398 77.3367 L  471.1398 104.2628  487.6949 115.7290  506.4402 115.7290 C  520.9339 115.7290  534.0105 109.6738  534.0105 91.1862 C  534.0105 91.1862 L  534.0105 74.9532 L  534.0105 68.1251 L  557.7159 68.1251 L  557.7159 68.1251 LBb0 (Gradient10) 447.4344 68.1251 90.0000 114.1464 1 0 0 1 0 0 Bg0.0338 114.1464 110.2476 -0.0327 447.4344 182.2715 BmF2 BB*U%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_pattern_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_screens_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF